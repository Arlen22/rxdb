{"version":3,"file":"query-planner.js","names":["_index","require","_rxError","_rxSchemaHelper","INDEX_MAX","exports","String","fromCharCode","INDEX_MIN","Number","MIN_SAFE_INTEGER","getQueryPlan","schema","query","selector","indexes","slice","index","hasDescSorting","sort","find","sortField","Object","values","sortIrrelevevantFields","Set","keys","forEach","fieldName","schemaPart","getSchemaByObjectPath","type","hasOwnProperty","add","optimalSortIndex","map","optimalSortIndexCompareString","filter","f","has","join","currentBestQuality","currentBestQueryPlan","inclusiveEnd","inclusiveStart","opts","indexField","matcher","operators","matcherOpts","length","startKey","endKey","operator","LOGICAL_OPERATORS","operatorValue","partialOpts","getMatcherQueryOpts","assign","queryPlan","startKeys","opt","endKeys","sortSatisfiedByIndex","selectorSatisfiedByIndex","isSelectorSatisfiedByIndex","quality","rateQueryPlan","newRxError","LOWER_BOUND_LOGICAL_OPERATORS","UPPER_BOUND_LOGICAL_OPERATORS","selectorEntries","entries","hasNonMatchingOperator","operation","includes","hasNonLogicOperator","op","_value","prevLowerBoundaryField","hasMoreThenOneLowerBoundaryField","hasLowerLogicOp","key","prevUpperBoundaryField","hasMoreThenOneUpperBoundaryField","hasUpperLogicOp","selectorFields","size","delete","Error","addQuality","value","pointsPerMatchingKey","nonMinKeyCount","countUntilNotMatching","keyValue","nonMaxKeyCount","equalKeyCount","idx","pointsIfNoReSortMustBeDone"],"sources":["../../src/query-planner.ts"],"sourcesContent":["import { countUntilNotMatching } from './plugins/utils/index.ts';\nimport { newRxError } from './rx-error.ts';\nimport { getSchemaByObjectPath } from './rx-schema-helper.ts';\nimport type {\n    FilledMangoQuery,\n    MangoQuerySelector,\n    RxDocumentData,\n    RxJsonSchema,\n    RxQueryPlan,\n    RxQueryPlanerOpts\n} from './types/index.d.ts';\n\n\nexport const INDEX_MAX = String.fromCharCode(65535);\n\n/**\n * Do not use -Infinity here because it would be\n * transformed to null on JSON.stringify() which can break things\n * when the query plan is send to the storage as json.\n * @link https://stackoverflow.com/a/16644751\n * Notice that for IndexedDB IDBKeyRange we have\n * to transform the value back to -Infinity\n * before we can use it in IDBKeyRange.bound.\n */\nexport const INDEX_MIN = Number.MIN_SAFE_INTEGER;\n\n/**\n * Returns the query plan which contains\n * information about how to run the query\n * and which indexes to use.\n *\n * This is used in some storage like Memory, dexie.js and IndexedDB.\n */\nexport function getQueryPlan<RxDocType>(\n    schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n    query: FilledMangoQuery<RxDocType>\n): RxQueryPlan {\n    const selector = query.selector;\n\n    let indexes: string[][] = schema.indexes ? schema.indexes.slice(0) as any : [];\n    if (query.index) {\n        indexes = [query.index];\n    }\n\n    /**\n     * Most storages do not support descending indexes\n     * so having a 'desc' in the sorting, means we always have to re-sort the results.\n     */\n    const hasDescSorting = !!query.sort.find(sortField => Object.values(sortField)[0] === 'desc');\n\n    /**\n     * Some fields can be part of the selector while not being relevant for sorting\n     * because their selector operators specify that in all cases all matching docs\n     * would have the same value.\n     * For example the boolean field _deleted.\n     * TODO similar thing could be done for enums.\n     */\n    const sortIrrelevevantFields = new Set();\n    Object.keys(selector).forEach(fieldName => {\n        const schemaPart = getSchemaByObjectPath(schema, fieldName);\n        if (\n            schemaPart &&\n            schemaPart.type === 'boolean' &&\n            (selector as any)[fieldName].hasOwnProperty('$eq')\n        ) {\n            sortIrrelevevantFields.add(fieldName);\n        }\n    });\n\n\n    const optimalSortIndex = query.sort.map(sortField => Object.keys(sortField)[0]);\n    const optimalSortIndexCompareString = optimalSortIndex\n        .filter(f => !sortIrrelevevantFields.has(f))\n        .join(',');\n\n    let currentBestQuality = -1;\n    let currentBestQueryPlan: RxQueryPlan | undefined;\n\n    indexes.forEach((index) => {\n        let inclusiveEnd = true;\n        let inclusiveStart = true;\n        const opts: RxQueryPlanerOpts[] = index.map(indexField => {\n            const matcher = (selector as any)[indexField];\n            const operators = matcher ? Object.keys(matcher) : [];\n\n            let matcherOpts: RxQueryPlanerOpts = {} as any;\n            if (\n                !matcher ||\n                !operators.length\n            ) {\n                const startKey = inclusiveStart ? INDEX_MIN : INDEX_MAX;\n                matcherOpts = {\n                    startKey,\n                    endKey: inclusiveEnd ? INDEX_MAX : INDEX_MIN,\n                    inclusiveStart: true,\n                    inclusiveEnd: true\n                };\n            } else {\n                operators.forEach(operator => {\n                    if (LOGICAL_OPERATORS.has(operator)) {\n                        const operatorValue = matcher[operator];\n                        const partialOpts = getMatcherQueryOpts(operator, operatorValue);\n                        matcherOpts = Object.assign(matcherOpts, partialOpts);\n                    }\n                });\n            }\n\n            // fill missing attributes\n            if (typeof matcherOpts.startKey === 'undefined') {\n                matcherOpts.startKey = INDEX_MIN;\n            }\n            if (typeof matcherOpts.endKey === 'undefined') {\n                matcherOpts.endKey = INDEX_MAX;\n            }\n            if (typeof matcherOpts.inclusiveStart === 'undefined') {\n                matcherOpts.inclusiveStart = true;\n            }\n            if (typeof matcherOpts.inclusiveEnd === 'undefined') {\n                matcherOpts.inclusiveEnd = true;\n            }\n\n            if (inclusiveStart && !matcherOpts.inclusiveStart) {\n                inclusiveStart = false;\n            }\n            if (inclusiveEnd && !matcherOpts.inclusiveEnd) {\n                inclusiveEnd = false;\n            }\n\n            return matcherOpts;\n        });\n\n        const queryPlan: RxQueryPlan = {\n            index,\n            startKeys: opts.map(opt => opt.startKey),\n            endKeys: opts.map(opt => opt.endKey),\n            inclusiveEnd,\n            inclusiveStart,\n            sortSatisfiedByIndex: !hasDescSorting && optimalSortIndexCompareString === index.filter(f => !sortIrrelevevantFields.has(f)).join(','),\n            selectorSatisfiedByIndex: isSelectorSatisfiedByIndex(index, query.selector)\n        };\n        const quality = rateQueryPlan(\n            schema,\n            query,\n            queryPlan\n        );\n        if (\n            (\n                quality >= currentBestQuality\n            ) ||\n            query.index\n        ) {\n            currentBestQuality = quality;\n            currentBestQueryPlan = queryPlan;\n        }\n    });\n\n    /**\n     * In all cases and index must be found\n     */\n    if (!currentBestQueryPlan) {\n        throw newRxError('SNH', {\n            query\n        });\n    }\n\n    return currentBestQueryPlan;\n}\n\nexport const LOGICAL_OPERATORS = new Set(['$eq', '$gt', '$gte', '$lt', '$lte']);\nexport const LOWER_BOUND_LOGICAL_OPERATORS = new Set(['$eq', '$gt', '$gte']);\nexport const UPPER_BOUND_LOGICAL_OPERATORS = new Set(['$eq', '$lt', '$lte']);\n\n\nexport function isSelectorSatisfiedByIndex(\n    index: string[],\n    selector: MangoQuerySelector<any>\n): boolean {\n    const selectorEntries = Object.entries(selector);\n    const hasNonMatchingOperator = selectorEntries\n        .find(([fieldName, operation]) => {\n            if (!index.includes(fieldName)) {\n                return true;\n            }\n            const hasNonLogicOperator = Object.entries(operation as any)\n                .find(([op, _value]) => !LOGICAL_OPERATORS.has(op));\n            return hasNonLogicOperator;\n        });\n\n    if (hasNonMatchingOperator) {\n        return false;\n    }\n\n\n    let prevLowerBoundaryField: any;\n    const hasMoreThenOneLowerBoundaryField = index.find(fieldName => {\n        const operation = selector[fieldName];\n        if (!operation) {\n            return false;\n        }\n        const hasLowerLogicOp = Object.keys(operation).find(key => LOWER_BOUND_LOGICAL_OPERATORS.has(key));\n        if (prevLowerBoundaryField && hasLowerLogicOp) {\n            return true;\n        } else if (hasLowerLogicOp !== '$eq') {\n            prevLowerBoundaryField = hasLowerLogicOp;\n        }\n        return false;\n    });\n    if (hasMoreThenOneLowerBoundaryField) {\n        return false;\n    }\n\n    let prevUpperBoundaryField: any;\n    const hasMoreThenOneUpperBoundaryField = index.find(fieldName => {\n        const operation = selector[fieldName];\n        if (!operation) {\n            return false;\n        }\n        const hasUpperLogicOp = Object.keys(operation).find(key => UPPER_BOUND_LOGICAL_OPERATORS.has(key));\n        if (prevUpperBoundaryField && hasUpperLogicOp) {\n            return true;\n        } else if (hasUpperLogicOp !== '$eq') {\n            prevUpperBoundaryField = hasUpperLogicOp;\n        }\n        return false;\n    });\n    if (hasMoreThenOneUpperBoundaryField) {\n        return false;\n    }\n\n    const selectorFields = new Set(Object.keys(selector));\n    for (const fieldName of index) {\n        if (selectorFields.size === 0) {\n            break;\n        }\n        if (selectorFields.has(fieldName)) {\n            selectorFields.delete(fieldName);\n        } else {\n            return false;\n        }\n    }\n\n\n    return true;\n}\n\nexport function getMatcherQueryOpts(\n    operator: string,\n    operatorValue: any\n): Partial<RxQueryPlanerOpts> {\n    switch (operator) {\n        case '$eq':\n            return {\n                startKey: operatorValue,\n                endKey: operatorValue\n            };\n        case '$lte':\n            return {\n                endKey: operatorValue\n            };\n        case '$gte':\n            return {\n                startKey: operatorValue\n            };\n        case '$lt':\n            return {\n                endKey: operatorValue,\n                inclusiveEnd: false\n            };\n        case '$gt':\n            return {\n                startKey: operatorValue,\n                inclusiveStart: false\n            };\n        default:\n            throw new Error('SNH');\n    }\n}\n\n\n/**\n * Returns a number that determines the quality of the query plan.\n * Higher number means better query plan.\n */\nexport function rateQueryPlan<RxDocType>(\n    schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n    query: FilledMangoQuery<RxDocType>,\n    queryPlan: RxQueryPlan\n): number {\n    let quality: number = 0;\n    const addQuality = (value: number) => {\n        if (value > 0) {\n            quality = quality + value;\n        }\n    };\n\n    const pointsPerMatchingKey = 10;\n\n    const nonMinKeyCount = countUntilNotMatching(queryPlan.startKeys, keyValue => keyValue !== INDEX_MIN && keyValue !== INDEX_MAX);\n    addQuality(nonMinKeyCount * pointsPerMatchingKey);\n\n    const nonMaxKeyCount = countUntilNotMatching(queryPlan.startKeys, keyValue => keyValue !== INDEX_MAX && keyValue !== INDEX_MIN);\n    addQuality(nonMaxKeyCount * pointsPerMatchingKey);\n\n    const equalKeyCount = countUntilNotMatching(queryPlan.startKeys, (keyValue, idx) => {\n        if (keyValue === queryPlan.endKeys[idx]) {\n            return true;\n        } else {\n            return false;\n        }\n    });\n    addQuality(equalKeyCount * pointsPerMatchingKey * 1.5);\n\n    const pointsIfNoReSortMustBeDone = queryPlan.sortSatisfiedByIndex ? 5 : 0;\n    addQuality(pointsIfNoReSortMustBeDone);\n\n    return quality;\n}\n"],"mappings":"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"}