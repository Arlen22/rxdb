{"version":3,"file":"index.js","names":["_index","require","migrateStorage","database","oldDatabaseName","oldStorage","batchSize","afterMigrateBatch","logFunction","collections","Object","values","collection","migrateCollection","log","message","name","schema","jsonSchema","primaryPath","oldDatabaseInstanceToken","randomCouchString","oldStorageInstance","createStorageInstance","databaseName","collectionName","multiInstance","options","databaseInstanceToken","devMode","preparedQuery","statics","prepareQuery","selector","limit","sort","skip","_loop","queryResult","query","docs","documents","length","remove","v","docsNonMutated","clone","attachments","Promise","all","map","doc","docId","entries","_attachments","attachmentId","attachmentMeta","attachmentData","getAttachmentData","digest","attachmentDataString","blobToBase64String","data","type","insertToNewWriteRows","document","writeToNewResult","storageInstance","bulkWrite","writeToOldRows","_doc","idx","previous","_meta","lwt","Date","getTime","newDoc","_deleted","_rev","createRevision","writeToOldResult","keys","error","console","dir","errors","Error","err","cleanup","_ret"],"sources":["../../../../src/plugins/migration-storage/index.ts"],"sourcesContent":["import {\n    RxDatabase,\n    RxCollection,\n    createRevision,\n    clone,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    randomCouchString,\n    now,\n    RxStorage,\n    blobToBase64String\n} from '../../index.ts';\n\nexport type RxStorageOld<A, B> = RxStorage<A, B> | any;\n\nexport type AfterMigrateBatchHandlerInput = {\n    databaseName: string;\n    collectionName: string;\n    oldDatabaseName: string;\n    insertToNewWriteRows: BulkWriteRow<any>[];\n    writeToNewResult: RxStorageBulkWriteResponse<any>;\n};\nexport type AfterMigrateBatchHandler = (\n    input: AfterMigrateBatchHandlerInput\n) => any | Promise<any>;\n\n/**\n * Migrates collections of RxDB version A and puts them\n * into a RxDatabase that is created with version B.\n * This function only works from the previous major version upwards.\n * Do not use it to migrate like rxdb v9 to v14. \n */\nexport async function migrateStorage(\n    database: RxDatabase,\n    /**\n     * Using the migration plugin requires you\n     * to rename your new old database.\n     * The original name of the v11 database must be provided here.\n     */\n    oldDatabaseName: string,\n    oldStorage: RxStorageOld<any, any>,\n    batchSize = 10,\n    afterMigrateBatch?: AfterMigrateBatchHandler,\n    // to log each step, pass console.log.bind(console) here.\n    logFunction?: (message: string) => void\n): Promise<void> {\n    const collections = Object.values(database.collections);\n    for (const collection of collections) {\n        await migrateCollection(\n            collection,\n            oldDatabaseName,\n            oldStorage,\n            batchSize,\n            afterMigrateBatch,\n            logFunction\n        );\n    }\n}\n\nexport async function migrateCollection<RxDocType>(\n    collection: RxCollection<RxDocType>,\n    oldDatabaseName: string,\n    oldStorage: RxStorageOld<any, any>,\n    batchSize: number,\n    afterMigrateBatch?: AfterMigrateBatchHandler,\n    // to log each step, pass console.log.bind(console) here.\n    logFunction?: (message: string) => void\n) {\n    function log(message: string) {\n        if (logFunction) {\n            logFunction('migrateCollection(' + collection.name + ')' + message);\n        }\n    }\n    log('start migrateCollection()');\n    const schema = collection.schema.jsonSchema;\n    const primaryPath = collection.schema.primaryPath;\n    const oldDatabaseInstanceToken = randomCouchString(10);\n    const oldStorageInstance = await oldStorage.createStorageInstance({\n        databaseName: oldDatabaseName,\n        collectionName: collection.name,\n        multiInstance: false,\n        options: {},\n        schema: schema as any,\n        databaseInstanceToken: oldDatabaseInstanceToken,\n        devMode: false\n    });\n\n    const preparedQuery = oldStorage.statics.prepareQuery(\n        schema as any,\n        {\n            selector: {},\n            limit: batchSize,\n            sort: [{ [primaryPath]: 'asc' } as any],\n            skip: 0\n        }\n    );\n\n    while (true) {\n        log('loop once');\n        /**\n         * Get a batch of documents\n         */\n        const queryResult = await oldStorageInstance.query(preparedQuery);\n        const docs = queryResult.documents;\n        if (docs.length === 0) {\n            /**\n             * No more documents to migrate\n             */\n            log('migration of collection done');\n            await oldStorageInstance.remove();\n            return;\n        }\n\n        const docsNonMutated = clone(docs);\n\n        /**\n         * Get attachments\n         * if defined in the schema.\n         */\n        if (schema.attachments) {\n            await Promise.all(\n                docs.map(async (doc: any) => {\n                    const docId: string = (doc as any)[primaryPath];\n                    await Promise.all(\n                        Object.entries(doc._attachments).map(async ([attachmentId, attachmentMeta]) => {\n                            const attachmentData = await oldStorageInstance.getAttachmentData(\n                                docId,\n                                attachmentId,\n                                (attachmentMeta as any).digest\n                            );\n                            const attachmentDataString = await blobToBase64String(attachmentData);\n                            (doc as any)._attachments[attachmentId] = {\n                                data: attachmentDataString,\n                                digest: (attachmentMeta as any).digest,\n                                length: (attachmentMeta as any).length,\n                                type: (attachmentMeta as any).type\n                            }\n                        })\n                    );\n                })\n            );\n            log('got attachments');\n        }\n\n        /**\n         * Insert the documents to the new storage\n         */\n        const insertToNewWriteRows: BulkWriteRow<any>[] = docs.map((document: any) => {\n            return { document };\n        });\n        const writeToNewResult: RxStorageBulkWriteResponse<any> = await collection.storageInstance.bulkWrite(\n            insertToNewWriteRows,\n            'migrate-storage'\n        );\n        log('written batch to new storage');\n\n        // TODO we should throw on non-conflict errors here.\n        // if (Object.keys(writeToNewResult.error).length > 0) {\n        //     console.dir(writeToNewResult);\n        //     throw new Error('could not write to new storage');\n        // }\n\n        /**\n         * Remove the docs from the old storage\n         */\n        const writeToOldRows = docs.map((_doc: any, idx: number) => {\n            const previous = docsNonMutated[idx];\n            if (!previous._meta) {\n                previous._meta = {\n                    lwt: new Date().getTime()\n                };\n            }\n\n            const newDoc: typeof previous = clone(previous);\n            newDoc._deleted = true;\n            if (!newDoc._meta) {\n                newDoc._meta = {\n                    lwt: new Date().getTime()\n                };\n            }\n            newDoc._meta.lwt = new Date().getTime() + 1;\n            newDoc._rev = createRevision(\n                oldDatabaseInstanceToken,\n                previous\n            );\n\n            return {\n                previous,\n                document: newDoc,\n            }\n        });\n        try {\n            const writeToOldResult = await oldStorageInstance.bulkWrite(\n                writeToOldRows,\n                'migrate-between-rxdb-versions'\n            );\n            if (Object.keys(writeToOldResult.error).length > 0) {\n                console.dir({\n                    writeToOldRows,\n                    errors: writeToOldResult.error\n                });\n                throw new Error('got error while deleting migrated documents on the old storage');\n            }\n        } catch (err) {\n            log('could not delete on old instance');\n            console.dir(err);\n            throw err;\n        }\n        log('deleted batch on old storage');\n        await oldStorageInstance.cleanup(0);\n\n        // run the handler if provided\n        if (afterMigrateBatch) {\n            await afterMigrateBatch({\n                databaseName: collection.database.name,\n                collectionName: collection.name,\n                oldDatabaseName,\n                insertToNewWriteRows,\n                writeToNewResult\n            });\n        }\n    }\n}\n\n\n\n\n\n"],"mappings":"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"}