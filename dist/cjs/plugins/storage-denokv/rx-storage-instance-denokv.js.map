{"version":3,"file":"rx-storage-instance-denokv.js","names":["_rxjs","require","_rxSchemaHelper","_rxStorageMultiinstance","_denokvHelper","_customIndex","_utilsArray","_utilsOther","_utilsString","_rxStorageHelper","_utilsTime","_denokvQuery","_queryPlanner","_utilsPromise","_utilsObject","RxStorageInstanceDenoKV","exports","storage","databaseName","collectionName","schema","internals","options","settings","keySpace","version","join","kvOptions","consistency","consistencyLevel","changes$","Subject","primaryPath","getPrimaryFieldOfPrimaryKey","primaryKey","kvPromise","getDenoGlobal","openKv","openKvPath","then","kv","set","_proto","prototype","bulkWrite","documentWrites","context","_this","ret","success","error","eventBulkId","randomCouchString","eventBulk","id","events","checkpoint","startTime","now","endTime","batches","batchArray","ensureNotFalsy","batchSize","writeBatch","_loop","writeBlockKey","get","docsInDB","Map","readManyBatches","Promise","all","map","readManyBatch","docsResult","getMany","writeRow","docId","document","DENOKV_DOCUMENT_ROOT_PATH","row","docData","value","categorized","categorizeBulkWriteRows","tx","atomic","check","bulkInsertDocs","forEach","push","Object","values","indexes","indexMeta","indexString","getIndexableString","indexId","bulkUpdateDocs","oldIndexString","previous","newIndexString","delete","txResult","commit","ok","appendToArray","errors","length","lastEvent","lastOfArray","documentData","lwt","_meta","next","findDocumentsById","ids","withDeleted","kvKey","findSingleResult","docInDb","_deleted","query","preparedQuery","queryDenoKV","count","result","documents","mode","info","range","list","start","end","INDEX_MAX","totalCount","res","getAttachmentData","documentId","attachmentId","digest","Error","getChangedDocumentsSince","limit","index","indexName","getDenoKVIndexName","lowerBoundString","checkpointPartialDoc","changeIndexableStringByOneQuantum","docIds","batch","docs","lastDoc","changeStream","asObservable","cleanup","minimumDeletedTime","_this2","maxDeletionTime","CLEANUP_INDEX","getStartIndexStringFromLowerBound","upperBoundString","noMoreUndeleted","rangeCount","_loop2","docDataResult","indexMetaInner","_ret","close","closed","complete","remove","ensureNotClosed","promises","key","conflictResultionTasks","resolveConflictResultionTask","_taskSolution","PROMISE_RESOLVE_VOID","createDenoKVStorageInstance","params","flatClone","indexDBs","useIndexes","slice","useIndexesFinal","indexAr","toArray","unshift","getIndexableStringMonad","instance","addRxStorageMultiInstanceSupport","RX_STORAGE_NAME_DENOKV","resolve"],"sources":["../../../../src/plugins/storage-denokv/rx-storage-instance-denokv.ts"],"sourcesContent":["\nimport {\n    Subject,\n    Observable\n} from 'rxjs';\nimport type {\n    RxStorageInstance,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageQueryResult,\n    RxJsonSchema,\n    RxStorageInstanceCreationParams,\n    EventBulk,\n    StringKeys,\n    RxConflictResultionTaskSolution,\n    RxStorageDefaultCheckpoint,\n    RxStorageCountResult,\n    RxStorageInfoResult,\n    RxConflictResultionTask\n} from '../../types/index.d.ts';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper.ts';\nimport { addRxStorageMultiInstanceSupport } from '../../rx-storage-multiinstance.ts';\nimport type { DenoKVIndexMeta, DenoKVPreparedQuery, DenoKVSettings, DenoKVStorageInternals } from './denokv-types.ts';\nimport { RxStorageDenoKV } from './index.ts';\nimport { CLEANUP_INDEX, DENOKV_DOCUMENT_ROOT_PATH, RX_STORAGE_NAME_DENOKV, getDenoGlobal, getDenoKVIndexName } from \"./denokv-helper.ts\";\nimport { getIndexableStringMonad, getStartIndexStringFromLowerBound, changeIndexableStringByOneQuantum } from \"../../custom-index.ts\";\nimport { appendToArray, batchArray, lastOfArray, toArray } from \"../utils/utils-array.ts\";\nimport { ensureNotFalsy } from \"../utils/utils-other.ts\";\nimport { randomCouchString } from \"../utils/utils-string.ts\";\nimport { categorizeBulkWriteRows } from \"../../rx-storage-helper.ts\";\nimport { now } from \"../utils/utils-time.ts\";\nimport { queryDenoKV } from \"./denokv-query.ts\";\nimport { INDEX_MAX } from \"../../query-planner.ts\";\nimport { PROMISE_RESOLVE_VOID } from \"../utils/utils-promise.ts\";\nimport { flatClone } from \"../utils/utils-object.ts\";\n\n\n\nexport class RxStorageInstanceDenoKV<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    DenoKVStorageInternals<RxDocType>,\n    DenoKVSettings,\n    RxStorageDefaultCheckpoint\n> {\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n    public closed?: Promise<void>;\n    public readonly kvPromise: Promise<any>;\n\n    constructor(\n        public readonly storage: RxStorageDenoKV,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: DenoKVStorageInternals<RxDocType>,\n        public readonly options: Readonly<DenoKVSettings>,\n        public readonly settings: DenoKVSettings,\n        public readonly keySpace = ['rxdb', databaseName, collectionName, schema.version].join('|'),\n        public readonly kvOptions = { consistency: settings.consistencyLevel }\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        this.kvPromise = getDenoGlobal().openKv(settings.openKvPath).then(async (kv: any) => {\n            // insert writeBlockKey\n            await kv.set([this.keySpace], 1);\n            return kv;\n        });\n    }\n    async bulkWrite(documentWrites: BulkWriteRow<RxDocType>[], context: string): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        const kv = await this.kvPromise;\n        const primaryPath = this.primaryPath;\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: [],\n            error: []\n        };\n        const eventBulkId = randomCouchString(10);\n        const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any> = {\n            id: eventBulkId,\n            events: [],\n            checkpoint: null,\n            context,\n            startTime: now(),\n            endTime: 0\n        };\n\n\n        const batches = batchArray(documentWrites, ensureNotFalsy(this.settings.batchSize));\n\n        /**\n         * DenoKV does not have transactions\n         * so we use a special writeBlock row to ensure\n         * atomic writes (per document)\n         * and so that we can do bulkWrites\n         */\n        for (const writeBatch of batches) {\n            while (true) {\n                const writeBlockKey = await kv.get([this.keySpace], this.kvOptions);\n                const docsInDB = new Map<string, RxDocumentData<RxDocType>>();\n\n                /**\n                 * TODO the max amount for .getMany() is 10 which is defined by deno itself.\n                 * How can this be increased?\n                 */\n                const readManyBatches = batchArray(writeBatch, 10);\n                await Promise.all(\n                    readManyBatches.map(async (readManyBatch) => {\n                        const docsResult = await kv.getMany(\n                            readManyBatch.map(writeRow => {\n                                const docId: string = writeRow.document[primaryPath] as any;\n                                return [this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId];\n                            })\n                        );\n                        docsResult.map((row: any) => {\n                            const docData = row.value;\n                            if (!docData) {\n                                return;\n                            }\n                            const docId: string = docData[primaryPath] as any;\n                            docsInDB.set(docId, docData);\n                        });\n                    })\n                );\n                const categorized = categorizeBulkWriteRows<RxDocType>(\n                    this,\n                    this.primaryPath as any,\n                    docsInDB,\n                    writeBatch,\n                    context\n                );\n\n                let tx = kv.atomic();\n                tx = tx.set([this.keySpace], ensureNotFalsy(writeBlockKey.value) + 1);\n                tx = tx.check(writeBlockKey);\n\n                // INSERTS\n                categorized.bulkInsertDocs.forEach(writeRow => {\n                    const docId: string = writeRow.document[this.primaryPath] as any;\n                    ret.success.push(writeRow.document);\n\n                    // insert document data\n                    tx = tx.set([this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId], writeRow.document);\n\n                    // insert secondary indexes\n                    Object.values(this.internals.indexes).forEach(indexMeta => {\n                        const indexString = indexMeta.getIndexableString(writeRow.document as any);\n                        tx = tx.set([this.keySpace, indexMeta.indexId, indexString], docId);\n                    });\n                });\n                // UPDATES\n                categorized.bulkUpdateDocs.forEach((writeRow: BulkWriteRow<RxDocType>) => {\n                    const docId: string = writeRow.document[this.primaryPath] as any;\n\n                    // insert document data\n                    tx = tx.set([this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId], writeRow.document);\n\n                    // insert secondary indexes\n                    Object.values(this.internals.indexes).forEach(indexMeta => {\n                        const oldIndexString = indexMeta.getIndexableString(ensureNotFalsy(writeRow.previous));\n                        const newIndexString = indexMeta.getIndexableString(writeRow.document as any);\n                        if (oldIndexString !== newIndexString) {\n                            tx = tx.delete([this.keySpace, indexMeta.indexId, oldIndexString]);\n                            tx = tx.set([this.keySpace, indexMeta.indexId, newIndexString], docId);\n                        }\n                    });\n                    ret.success.push(writeRow.document as any);\n                });\n\n                const txResult = await tx.commit();\n                if (txResult.ok) {\n                    appendToArray(ret.error, categorized.errors);\n                    appendToArray(eventBulk.events, categorized.eventBulk.events);\n                    break;\n                }\n            }\n        }\n\n        if (eventBulk.events.length > 0) {\n            const lastEvent = ensureNotFalsy(lastOfArray(eventBulk.events));\n            eventBulk.checkpoint = {\n                id: lastEvent.documentData[this.primaryPath],\n                lwt: lastEvent.documentData._meta.lwt\n            };\n            eventBulk.endTime = now();\n            this.changes$.next(eventBulk);\n        }\n\n        return ret;\n    }\n    async findDocumentsById(ids: string[], withDeleted: boolean): Promise<RxDocumentData<RxDocType>[]> {\n        const kv = await this.kvPromise;\n        const ret: RxDocumentData<RxDocType>[] = [];\n        await Promise.all(\n            ids.map(async (docId) => {\n                const kvKey = [this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId];\n                const findSingleResult = await kv.get(kvKey, this.kvOptions);\n                const docInDb = findSingleResult.value;\n                if (\n                    docInDb &&\n                    (\n                        !docInDb._deleted ||\n                        withDeleted\n                    )\n                ) {\n                    ret.push(docInDb);\n                }\n            })\n        );\n        return ret;\n    }\n    query(preparedQuery: DenoKVPreparedQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        return queryDenoKV(this, preparedQuery);\n    }\n    async count(preparedQuery: DenoKVPreparedQuery<RxDocType>): Promise<RxStorageCountResult> {\n        /**\n         * At this point in time (end 2023), DenoKV does not support\n         * range counts. So we have to run a normal query and use the result set length.\n         * @link https://github.com/denoland/deno/issues/18965\n         */\n        const result = await this.query(preparedQuery);\n        return {\n            count: result.documents.length,\n            mode: 'fast'\n        };\n    }\n    async info(): Promise<RxStorageInfoResult> {\n        const kv = await this.kvPromise;\n        const range = kv.list({\n            start: [this.keySpace, DENOKV_DOCUMENT_ROOT_PATH],\n            end: [this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, INDEX_MAX]\n        }, this.kvOptions);\n        let totalCount = 0;\n        for await (const res of range) {\n            totalCount++;\n        }\n        return {\n            totalCount\n        };\n    }\n    getAttachmentData(documentId: string, attachmentId: string, digest: string): Promise<string> {\n        throw new Error(\"Method not implemented.\");\n    }\n    async getChangedDocumentsSince(limit: number, checkpoint?: RxStorageDefaultCheckpoint | undefined): Promise<{ documents: RxDocumentData<RxDocType>[]; checkpoint: RxStorageDefaultCheckpoint; }> {\n        const kv = await this.kvPromise;\n        const index = [\n            '_meta.lwt',\n            this.primaryPath as any\n        ];\n        const indexName = getDenoKVIndexName(index);\n        const indexMeta = this.internals.indexes[indexName];\n        let lowerBoundString = '';\n        if (checkpoint) {\n            const checkpointPartialDoc: any = {\n                [this.primaryPath]: checkpoint.id,\n                _meta: {\n                    lwt: checkpoint.lwt\n                }\n            };\n            lowerBoundString = indexMeta.getIndexableString(checkpointPartialDoc);\n            lowerBoundString = changeIndexableStringByOneQuantum(lowerBoundString, 1);\n        }\n\n        const range = kv.list({\n            start: [this.keySpace, indexMeta.indexId, lowerBoundString],\n            end: [this.keySpace, indexMeta.indexId, INDEX_MAX]\n        }, {\n            consistency: this.settings.consistencyLevel,\n            limit,\n            batchSize: this.settings.batchSize\n        });\n        const docIds: any[] = [];\n        for await (const row of range) {\n            const docId = row.value;\n            docIds.push([this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId]);\n        }\n\n        /**\n         * We have to run in batches because without it says\n         * \"TypeError: too many ranges (max 10)\"\n         */\n        const batches = batchArray(docIds, 10);\n        const result: RxDocumentData<RxDocType>[] = [];\n\n        for (const batch of batches) {\n            const docs = await kv.getMany(batch);\n            docs.forEach((row: any) => {\n                const docData = row.value;\n                result.push(docData as any);\n            });\n        }\n\n        const lastDoc = lastOfArray(result);\n        return {\n            documents: result,\n            checkpoint: lastDoc ? {\n                id: lastDoc[this.primaryPath] as any,\n                lwt: lastDoc._meta.lwt\n            } : checkpoint ? checkpoint : {\n                id: '',\n                lwt: 0\n            }\n        };\n    }\n    changeStream() {\n        return this.changes$.asObservable();\n    }\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const maxDeletionTime = now() - minimumDeletedTime;\n        const kv = await this.kvPromise;\n        const index = CLEANUP_INDEX;\n        const indexName = getDenoKVIndexName(index);\n        const indexMeta = this.internals.indexes[indexName];\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            index,\n            [\n                true,\n                /**\n                 * Do not use 0 here,\n                 * because 1 is the minimum value for _meta.lwt\n                 */\n                1\n            ],\n            false\n        );\n        const upperBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            index,\n            [\n                true,\n                maxDeletionTime\n            ],\n            true\n        );\n        let noMoreUndeleted: boolean = true;\n\n        const range = kv.list({\n            start: [this.keySpace, indexMeta.indexId, lowerBoundString],\n            end: [this.keySpace, indexMeta.indexId, upperBoundString]\n        }, {\n            consistency: this.settings.consistencyLevel,\n            batchSize: this.settings.batchSize,\n            limit: this.settings.batchSize\n        });\n\n        let rangeCount = 0;\n        for await (const row of range) {\n            rangeCount = rangeCount + 1;\n            const docId = row.value;\n            const docDataResult = await kv.get([this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId], this.kvOptions);\n            if (!docDataResult.value) {\n                continue;\n            }\n            const docData = ensureNotFalsy(docDataResult.value);\n            if (\n                !docData._deleted ||\n                docData._meta.lwt > maxDeletionTime\n            ) {\n                continue;\n            }\n\n\n            let tx = kv.atomic();\n            tx = tx.check(docDataResult);\n            tx = tx.delete([this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId]);\n            Object\n                .values(this.internals.indexes)\n                .forEach(indexMetaInner => {\n                    tx = tx.delete([this.keySpace, indexMetaInner.indexId, docId]);\n                });\n            await tx.commit();\n        }\n        return noMoreUndeleted;\n    }\n    async close(): Promise<void> {\n        if (this.closed) {\n            return this.closed;\n        }\n        this.closed = (async () => {\n            this.changes$.complete();\n            const kv = await this.kvPromise;\n            await kv.close();\n        })();\n        return this.closed;\n    }\n    async remove(): Promise<void> {\n        ensureNotClosed(this);\n        const kv = await this.kvPromise;\n        const range = kv.list({\n            start: [this.keySpace],\n            end: [this.keySpace, INDEX_MAX]\n        }, {\n            consistency: this.settings.consistencyLevel,\n            batchSize: this.settings.batchSize\n        });\n        let promises: Promise<any>[] = [];\n        for await (const row of range) {\n            promises.push(kv.delete(row.key));\n        }\n\n        await Promise.all(promises);\n        return this.close();\n    }\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject<any>().asObservable();\n    }\n    resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> {\n        return PROMISE_RESOLVE_VOID;\n    }\n}\n\n\n\nexport function createDenoKVStorageInstance<RxDocType>(\n    storage: RxStorageDenoKV,\n    params: RxStorageInstanceCreationParams<RxDocType, DenoKVSettings>,\n    settings: DenoKVSettings\n): Promise<RxStorageInstanceDenoKV<RxDocType>> {\n    settings = flatClone(settings);\n    if (!settings.batchSize) {\n        settings.batchSize = 100;\n    }\n\n    const primaryPath = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\n\n    const indexDBs: { [indexName: string]: DenoKVIndexMeta<RxDocType>; } = {};\n    const useIndexes = params.schema.indexes ? params.schema.indexes.slice(0) : [];\n    useIndexes.push([primaryPath]);\n    const useIndexesFinal = useIndexes.map(index => {\n        const indexAr = toArray(index);\n        indexAr.unshift('_deleted');\n        return indexAr;\n    });\n    // used for `getChangedDocumentsSince()`\n    useIndexesFinal.push([\n        '_meta.lwt',\n        primaryPath\n    ]);\n    useIndexesFinal.push(CLEANUP_INDEX);\n    useIndexesFinal.forEach((indexAr, indexId) => {\n        const indexName = getDenoKVIndexName(indexAr);\n        indexDBs[indexName] = {\n            indexId: '|' + indexId + '|',\n            indexName,\n            getIndexableString: getIndexableStringMonad(params.schema, indexAr),\n            index: indexAr\n        };\n    });\n\n    const internals = {\n        indexes: indexDBs\n    };\n    const instance = new RxStorageInstanceDenoKV(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings\n    );\n\n    addRxStorageMultiInstanceSupport(\n        RX_STORAGE_NAME_DENOKV,\n        params,\n        instance\n    );\n\n    return Promise.resolve(instance);\n}\n\n\n\nfunction ensureNotClosed(\n    instance: RxStorageInstanceDenoKV<any>\n) {\n    if (instance.closed) {\n        throw new Error('RxStorageInstanceDenoKV is closed ' + instance.databaseName + '-' + instance.collectionName);\n    }\n}\n"],"mappings":"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"}