{"version":3,"file":"index.js","names":["_index","require","_plugin","_index2","_appwrite","_utilsArray","_appwriteHelpers","_utilsObject","_rxjs","RxAppwriteReplicationState","exports","_RxReplicationState","replicationIdentifierHash","collection","pull","push","live","retryTime","autoStart","_this","call","_inheritsLoose2","default","RxReplicationState","replicateAppwrite","options","primaryKey","schema","primaryPath","pullStream$","Subject","addRxPlugin","RxDBLeaderElectionPlugin","deletedField","waitForLeadership","databases","Databases","client","replicationPrimitivesPull","batchSize","modifier","stream$","asObservable","initialCheckpoint","handler","lastPulledCheckpoint","queries","Query","or","greaterThan","updatedAt","and","equal","id","orderAsc","limit","result","listDocuments","databaseId","collectionId","lastDoc","lastOfArray","documents","newCheckpoint","$id","$updatedAt","resultDocs","map","doc","appwriteDocToRxDB","checkpoint","undefined","replicationPrimitivesPush","rows","query","length","row","newDocumentState","docsOnServer","docsInDbById","forEach","docDataInDb","docId","conflicts","Promise","all","writeRow","docInDb","assumedMasterState","conflictHandler","isEqual","writeDoc","flatClone","_deleted","createDocument","updateDocument","replicationState","replicationIdentifier","startBefore","start","bind","cancelBefore","cancel","channel","unsubscribe","subscribe","response","docData","payload","next","startReplicationOnLeaderShip"],"sources":["../../../../src/plugins/replication-appwrite/index.ts"],"sourcesContent":["import type {\n    SyncOptionsAppwrite,\n    AppwriteCheckpointType\n} from './appwrite-types';\nimport {\n    RxReplicationState,\n    startReplicationOnLeaderShip\n} from '../replication/index.ts';\nimport type {\n    ById,\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    RxCollection,\n    RxReplicationPullStreamItem,\n    RxReplicationWriteToMasterRow,\n    WithDeleted\n} from '../../types';\nimport { addRxPlugin } from '../../plugin.ts';\nimport { RxDBLeaderElectionPlugin } from '../leader-election/index.ts';\nimport {\n    Databases,\n    Query,\n    Models\n} from 'appwrite';\nimport { lastOfArray } from '../utils/utils-array.ts';\nimport { appwriteDocToRxDB } from './appwrite-helpers.ts';\nimport { flatClone } from '../utils/utils-object.ts';\nimport { Subject } from 'rxjs';\n\nexport class RxAppwriteReplicationState<RxDocType> extends RxReplicationState<RxDocType, AppwriteCheckpointType> {\n    constructor(\n        public readonly replicationIdentifierHash: string,\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly pull?: ReplicationPullOptions<RxDocType, AppwriteCheckpointType>,\n        public readonly push?: ReplicationPushOptions<RxDocType>,\n        public readonly live: boolean = true,\n        public retryTime: number = 1000 * 5,\n        public autoStart: boolean = true\n    ) {\n        super(\n            replicationIdentifierHash,\n            collection,\n            '_deleted',\n            pull,\n            push,\n            live,\n            retryTime,\n            autoStart\n        );\n    }\n}\n\nexport function replicateAppwrite<RxDocType>(\n    options: SyncOptionsAppwrite<RxDocType>\n): RxAppwriteReplicationState<RxDocType> {\n    const collection: RxCollection<RxDocType> = options.collection;\n    const primaryKey = collection.schema.primaryPath;\n    const pullStream$: Subject<RxReplicationPullStreamItem<RxDocType, AppwriteCheckpointType>> = new Subject();\n\n    addRxPlugin(RxDBLeaderElectionPlugin);\n    options.live = typeof options.live === 'undefined' ? true : options.live;\n    options.deletedField = options.deletedField ? options.deletedField : '_deleted';\n    options.waitForLeadership = typeof options.waitForLeadership === 'undefined' ? true : options.waitForLeadership;\n\n    const databases = new Databases(options.client);\n\n    const replicationPrimitivesPull: ReplicationPullOptions<RxDocType, AppwriteCheckpointType> | undefined = options.pull ? {\n        batchSize: options.pull.batchSize,\n        modifier: options.pull.modifier,\n        stream$: pullStream$.asObservable(),\n        initialCheckpoint: options.pull.initialCheckpoint,\n        handler: async (\n            lastPulledCheckpoint: AppwriteCheckpointType | undefined,\n            batchSize: number\n        ) => {\n            const queries: string[] = [];\n            if (lastPulledCheckpoint) {\n                queries.push(\n                    Query.or([\n                        Query.greaterThan('$updatedAt', lastPulledCheckpoint.updatedAt),\n                        Query.and([\n                            Query.equal('$updatedAt', lastPulledCheckpoint.updatedAt),\n                            Query.greaterThan('$id', lastPulledCheckpoint.id)\n                        ])\n                    ])\n                );\n            }\n            queries.push(Query.orderAsc('$updatedAt'));\n            queries.push(Query.orderAsc('$id'));\n            queries.push(Query.limit(batchSize));\n\n            const result = await databases.listDocuments(\n                options.databaseId,\n                options.collectionId,\n                queries\n            );\n            const lastDoc = lastOfArray(result.documents);\n            const newCheckpoint: AppwriteCheckpointType | null = lastDoc ? {\n                id: lastDoc.$id,\n                updatedAt: lastDoc.$updatedAt\n            } : null;\n            const resultDocs: WithDeleted<RxDocType>[] = result.documents.map(doc => {\n                return appwriteDocToRxDB<RxDocType>(\n                    doc,\n                    primaryKey,\n                    options.deletedField\n                );\n            });\n\n            return {\n                checkpoint: newCheckpoint,\n                documents: resultDocs\n            };\n        }\n    } : undefined;\n\n    const replicationPrimitivesPush: ReplicationPushOptions<RxDocType> | undefined = options.push ? {\n        async handler(\n            rows: RxReplicationWriteToMasterRow<RxDocType>[]\n        ) {\n            let query: string;\n            if (rows.length > 1) {\n                query = Query.or(\n                    rows.map(row => {\n                        const id: string = (row.newDocumentState as any)[primaryKey];\n                        return Query.equal('$id', id);\n                    })\n                );\n            } else {\n                const id: string = (rows[0].newDocumentState as any)[primaryKey];\n                query = Query.equal('$id', id);\n            }\n            const docsOnServer = await databases.listDocuments(\n                options.databaseId,\n                options.collectionId,\n                [query]\n            );\n            const docsInDbById: ById<RxDocType> = {};\n            docsOnServer.documents.forEach(doc => {\n                const docDataInDb = appwriteDocToRxDB<RxDocType>(doc, primaryKey, options.deletedField);\n                const docId: string = doc.$id;\n                (docDataInDb as any)[primaryKey] = docId;\n                docsInDbById[docId] = docDataInDb;\n            });\n            const conflicts: WithDeleted<RxDocType>[] = [];\n            await Promise.all(\n                rows.map(async (writeRow) => {\n                    const docId = (writeRow.newDocumentState as any)[primaryKey];\n                    const docInDb: RxDocType | undefined = docsInDbById[docId];\n                    if (\n                        docInDb &&\n                        (\n                            !writeRow.assumedMasterState ||\n                            collection.conflictHandler.isEqual(docInDb as any, writeRow.assumedMasterState, 'replication-appwrite-push') === false\n                        )\n                    ) {\n                        // conflict\n                        conflicts.push(docInDb as any);\n                    } else {\n                        // no conflict\n                        const writeDoc: any = flatClone(writeRow.newDocumentState);\n                        delete writeDoc[primaryKey];\n                        writeDoc[options.deletedField] = writeDoc._deleted;\n                        if (options.deletedField !== '_deleted') {\n                            delete writeDoc._deleted;\n                        }\n\n                        let result: Models.Document;\n                        if (!docInDb) {\n                            result = await databases.createDocument(\n                                options.databaseId,\n                                options.collectionId,\n                                docId,\n                                writeDoc,\n                                // [\"read(\"any\")\"] // permissions (optional)\n                            );\n\n                        } else {\n                            result = await databases.updateDocument(\n                                options.databaseId,\n                                options.collectionId,\n                                docId,\n                                writeDoc,\n                                // [\"read(\"any\")\"] // permissions (optional)\n                            );\n                        }\n                    }\n                })\n            );\n            return conflicts;\n        }\n    } : undefined;\n\n    const replicationState = new RxAppwriteReplicationState<RxDocType>(\n        options.replicationIdentifier,\n        collection,\n        replicationPrimitivesPull,\n        replicationPrimitivesPush,\n        options.live,\n        options.retryTime,\n        options.autoStart\n    );\n\n    /**\n     * Subscribe to changes for the pull.stream$\n     */\n    if (options.live && options.pull) {\n        const startBefore = replicationState.start.bind(replicationState);\n        const cancelBefore = replicationState.cancel.bind(replicationState);\n        replicationState.start = () => {\n            const channel = 'databases.' + options.databaseId + '.collections.' + options.collectionId + '.documents';\n            const unsubscribe = options.client.subscribe(\n                channel,\n                (response) => {\n                    const docData = appwriteDocToRxDB<RxDocType>(response.payload, primaryKey, options.deletedField);\n                    pullStream$.next({\n                        checkpoint: {\n                            id: (docData as any)[primaryKey],\n                            updatedAt: (response.payload as any).$updatedAt\n                        },\n                        documents: [docData]\n                    });\n\n                }\n            );\n            replicationState.cancel = () => {\n                unsubscribe();\n                return cancelBefore();\n            };\n            return startBefore();\n        };\n    }\n\n    startReplicationOnLeaderShip(options.waitForLeadership, replicationState);\n    return replicationState;\n}\n"],"mappings":"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","ignoreList":[]}