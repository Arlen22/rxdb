{"version":3,"file":"rx-collection-helper.js","names":["_index","require","_rxSchemaHelper","_hooks","_rxDatabaseInternalStore","_rxStorageHelper","_overwritable","fillObjectDataBeforeInsert","schema","data","flatClone","fillObjectWithDefaults","fillPrimaryKey","primaryPath","jsonSchema","_meta","getDefaultRxDocumentMeta","hasOwnProperty","_deleted","_attachments","_rev","getDefaultRevision","createRxCollectionStorageInstance","rxDatabase","storageInstanceCreationParams","multiInstance","storageInstance","storage","createStorageInstance","removeCollectionStorages","databaseInternalStorage","databaseInstanceToken","databaseName","collectionName","password","hashFunction","allCollectionMetaDocs","getAllCollectionDocuments","statics","relevantCollectionMetaDocs","filter","metaDoc","name","removeStorages","forEach","push","isCollection","connectedStorages","row","alreadyAdded","Set","key","version","has","add","Promise","all","map","options","devMode","overwritable","isDevMode","remove","runAsyncPluginHooks","writeRows","doc","writeDoc","flatCloneDocWithMeta","lwt","now","createRevision","previous","document","bulkWrite"],"sources":["../../src/rx-collection-helper.ts"],"sourcesContent":["import type {\n    HashFunction,\n    InternalStoreDocType,\n    RxDatabase,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams\n} from './types/index.d.ts';\nimport {\n    createRevision,\n    flatClone,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    now\n} from './plugins/utils/index.ts';\nimport {\n    fillObjectWithDefaults,\n    fillPrimaryKey\n} from './rx-schema-helper.ts';\nimport type { RxSchema } from './rx-schema.ts';\nimport { runAsyncPluginHooks } from './hooks.ts';\nimport { getAllCollectionDocuments } from './rx-database-internal-store.ts';\nimport { flatCloneDocWithMeta } from './rx-storage-helper.ts';\nimport { overwritable } from './overwritable.ts';\n\n/**\n * fills in the default data.\n * This also clones the data.\n */\nexport function fillObjectDataBeforeInsert<RxDocType>(\n    schema: RxSchema<RxDocType>,\n    data: Partial<RxDocumentData<RxDocType>> | any\n): RxDocumentData<RxDocType> {\n    data = flatClone(data);\n    data = fillObjectWithDefaults(schema, data);\n    data = fillPrimaryKey(\n        schema.primaryPath,\n        schema.jsonSchema,\n        data\n    );\n    data._meta = getDefaultRxDocumentMeta();\n    if (!data.hasOwnProperty('_deleted')) {\n        data._deleted = false;\n    }\n    if (!data.hasOwnProperty('_attachments')) {\n        data._attachments = {};\n    }\n    if (!data.hasOwnProperty('_rev')) {\n        data._rev = getDefaultRevision();\n    }\n    return data;\n}\n\n/**\n * Creates the storage instances that are used internally in the collection\n */\nexport async function createRxCollectionStorageInstance<RxDocumentType, Internals, InstanceCreationOptions>(\n    rxDatabase: RxDatabase<{}, Internals, InstanceCreationOptions>,\n    storageInstanceCreationParams: RxStorageInstanceCreationParams<RxDocumentType, InstanceCreationOptions>\n): Promise<RxStorageInstance<RxDocumentType, Internals, InstanceCreationOptions>> {\n    storageInstanceCreationParams.multiInstance = rxDatabase.multiInstance;\n    const storageInstance = await rxDatabase.storage.createStorageInstance<RxDocumentType>(\n        storageInstanceCreationParams\n    );\n    return storageInstance;\n}\n\n/**\n * Removes the main storage of the collection\n * and all connected storages like the ones from the replication meta etc.\n */\nexport async function removeCollectionStorages(\n    storage: RxStorage<any, any>,\n    databaseInternalStorage: RxStorageInstance<InternalStoreDocType<any>, any, any>,\n    databaseInstanceToken: string,\n    databaseName: string,\n    collectionName: string,\n    password?: string,\n    /**\n     * If no hash function is provided,\n     * we assume that the whole internal store is removed anyway\n     * so we do not have to delete the meta documents.\n     */\n    hashFunction?: HashFunction,\n) {\n    const allCollectionMetaDocs = await getAllCollectionDocuments(\n        storage.statics,\n        databaseInternalStorage\n    );\n    const relevantCollectionMetaDocs = allCollectionMetaDocs\n        .filter(metaDoc => metaDoc.data.name === collectionName);\n\n    let removeStorages: {\n        collectionName: string;\n        schema: RxJsonSchema<any>;\n        isCollection: boolean;\n    }[] = [];\n    relevantCollectionMetaDocs.forEach(metaDoc => {\n        removeStorages.push({\n            collectionName: metaDoc.data.name,\n            schema: metaDoc.data.schema,\n            isCollection: true\n        });\n        metaDoc.data.connectedStorages.forEach(row => removeStorages.push({\n            collectionName: row.collectionName,\n            isCollection: false,\n            schema: row.schema\n        }));\n    });\n\n    // ensure uniqueness\n    const alreadyAdded = new Set<string>();\n    removeStorages = removeStorages.filter(row => {\n        const key = row.collectionName + '||' + row.schema.version;\n        if (alreadyAdded.has(key)) {\n            return false;\n        } else {\n            alreadyAdded.add(key);\n            return true;\n        }\n    });\n\n    // remove all the storages\n    await Promise.all(\n        removeStorages\n            .map(async (row) => {\n                const storageInstance = await storage.createStorageInstance<any>({\n                    collectionName: row.collectionName,\n                    databaseInstanceToken,\n                    databaseName,\n                    multiInstance: false,\n                    options: {},\n                    schema: row.schema,\n                    password,\n                    devMode: overwritable.isDevMode()\n                });\n                await storageInstance.remove();\n                if (row.isCollection) {\n                    await runAsyncPluginHooks('postRemoveRxCollection', {\n                        storage,\n                        databaseName: databaseName,\n                        collectionName\n                    });\n                }\n            })\n    );\n\n    // remove the meta documents\n    if (hashFunction) {\n        const writeRows = relevantCollectionMetaDocs.map(doc => {\n            const writeDoc = flatCloneDocWithMeta(doc);\n            writeDoc._deleted = true;\n            writeDoc._meta.lwt = now();\n            writeDoc._rev = createRevision(\n                databaseInstanceToken,\n                doc\n            );\n            return {\n                previous: doc,\n                document: writeDoc\n            };\n        });\n        await databaseInternalStorage.bulkWrite(\n            writeRows,\n            'rx-database-remove-collection-all'\n        );\n    }\n}\n"],"mappings":"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"}