{"version":3,"file":"rx-storage-instance-loki.js","names":["Subject","flatClone","now","ensureNotFalsy","isMaybeReadonlyArray","getFromMapOrThrow","getSortDocumentsByLastWriteTimeComparator","RX_META_LWT_MINIMUM","lastOfArray","newRxError","closeLokiCollections","getLokiDatabase","OPEN_LOKIJS_STORAGE_INSTANCES","LOKIJS_COLLECTION_DEFAULT_OPTIONS","stripLokiKey","getLokiSortComparator","getLokiLeaderElector","requestRemoteInstance","mustUseLocalState","handleRemoteRequest","RX_STORAGE_NAME_LOKIJS","transformRegexToRegExp","getPrimaryFieldOfPrimaryKey","categorizeBulkWriteRows","addRxStorageMultiInstanceSupport","removeBroadcastChannelReference","getQueryMatcher","instanceId","RxStorageInstanceLoki","databaseInstanceToken","storage","databaseName","collectionName","schema","internals","options","databaseSettings","changes$","primaryPath","primaryKey","add","leaderElector","copiedSelf","bulkWrite","bind","changeStream","cleanup","close","query","count","info","findDocumentsById","conflictResultionTasks","getAttachmentData","getChangedDocumentsSince","remove","resolveConflictResultionTask","awaitLeadership","then","broadcastChannel","addEventListener","msg","catch","_proto","prototype","documentWrites","context","length","args","localState","ret","success","error","docsInDb","Map","docsInDbWithLokiKey","forEach","writeRow","id","document","documentInDb","collection","by","set","categorized","errors","bulkInsertDocs","insert","push","bulkUpdateDocs","docId","documentInDbWithLokiKey","writeDoc","Object","assign","$loki","update","databaseState","saveQueue","addWrite","eventBulk","events","lastState","newestRow","checkpoint","lwt","_meta","endTime","next","ids","deleted","_deleted","preparedQuery","selector","chain","find","sort","skip","offset","limit","foundDocuments","data","map","lokiDoc","queryMatcher","filter","d","documents","result","mode","_documentId","_attachmentId","_digest","Error","totalCount","sinceLwt","$gte","changedDocs","first","shift","slice","lastDoc","docData","asObservable","minimumDeletedTime","deleteAmountPerRun","maxDeletionTime","$lt","closed","complete","delete","dbState","run","database","removeCollection","name","_taskSolution","createLokiLocalState","params","indices","indexes","idx","lokiCollectionName","version","collectionOptions","unique","addCollection","collections","createLokiStorageInstance","broadcastChannelRefObject","multiInstance","instance","undefined","closeBefore","removeBefore"],"sources":["../../../../src/plugins/storage-lokijs/rx-storage-instance-loki.ts"],"sourcesContent":["import {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    flatClone,\n    now,\n    ensureNotFalsy,\n    isMaybeReadonlyArray,\n    getFromMapOrThrow,\n    getSortDocumentsByLastWriteTimeComparator,\n    RX_META_LWT_MINIMUM,\n    lastOfArray\n} from '../utils/index.ts';\nimport { newRxError } from '../../rx-error.ts';\nimport type {\n    RxStorageInstance,\n    LokiSettings,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageQueryResult,\n    RxJsonSchema,\n    MangoQuery,\n    LokiStorageInternals,\n    RxStorageInstanceCreationParams,\n    LokiDatabaseSettings,\n    LokiLocalDatabaseState,\n    EventBulk,\n    StringKeys,\n    DeepReadonly,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxStorageDefaultCheckpoint,\n    RxStorageCountResult,\n    RxStorageInfoResult\n} from '../../types/index.d.ts';\nimport {\n    closeLokiCollections,\n    getLokiDatabase,\n    OPEN_LOKIJS_STORAGE_INSTANCES,\n    LOKIJS_COLLECTION_DEFAULT_OPTIONS,\n    stripLokiKey,\n    getLokiSortComparator,\n    getLokiLeaderElector,\n    requestRemoteInstance,\n    mustUseLocalState,\n    handleRemoteRequest,\n    RX_STORAGE_NAME_LOKIJS,\n    transformRegexToRegExp\n} from './lokijs-helper.ts';\nimport type { RxStorageLoki } from './rx-storage-lokijs.ts';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper.ts';\nimport { categorizeBulkWriteRows } from '../../rx-storage-helper.ts';\nimport {\n    addRxStorageMultiInstanceSupport,\n    removeBroadcastChannelReference\n} from '../../rx-storage-multiinstance.ts';\nimport { getQueryMatcher } from '../../rx-query-helper.ts';\n\nlet instanceId = now();\n\nexport class RxStorageInstanceLoki<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    LokiStorageInternals,\n    LokiSettings,\n    RxStorageDefaultCheckpoint\n> {\n\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n    public readonly instanceId = instanceId++;\n\n    public closed?: Promise<void>;\n\n    constructor(\n        public readonly databaseInstanceToken: string,\n        public readonly storage: RxStorageLoki,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: LokiStorageInternals,\n        public readonly options: Readonly<LokiSettings>,\n        public readonly databaseSettings: LokiDatabaseSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        OPEN_LOKIJS_STORAGE_INSTANCES.add(this);\n        if (this.internals.leaderElector) {\n\n\n            /**\n             * To run handleRemoteRequest(),\n             * the instance will call its own methods.\n             * But these methods could have already been swapped out by a RxStorageWrapper\n             * so we must store the original methods here and use them instead.\n             */\n            const copiedSelf: RxStorageInstance<RxDocType, any, any> = {\n                bulkWrite: this.bulkWrite.bind(this),\n                changeStream: this.changeStream.bind(this),\n                cleanup: this.cleanup.bind(this),\n                close: this.close.bind(this),\n                query: this.query.bind(this),\n                count: this.count.bind(this),\n                info: this.info.bind(this),\n                findDocumentsById: this.findDocumentsById.bind(this),\n                collectionName: this.collectionName,\n                databaseName: this.databaseName,\n                conflictResultionTasks: this.conflictResultionTasks.bind(this),\n                getAttachmentData: this.getAttachmentData.bind(this),\n                getChangedDocumentsSince: this.getChangedDocumentsSince.bind(this),\n                internals: this.internals,\n                options: this.options,\n                remove: this.remove.bind(this),\n                resolveConflictResultionTask: this.resolveConflictResultionTask.bind(this),\n                schema: this.schema\n            };\n\n            this.internals.leaderElector.awaitLeadership().then(() => {\n                // this instance is leader now, so it has to reply to queries from other instances\n                ensureNotFalsy(this.internals.leaderElector).broadcastChannel\n                    .addEventListener('message', (msg) => handleRemoteRequest(copiedSelf as any, msg));\n            }).catch(() => { });\n        }\n    }\n\n    async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'bulkWrite', [documentWrites]);\n        }\n\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: [],\n            error: []\n        };\n\n        const docsInDb: Map<RxDocumentData<RxDocType>[StringKeys<RxDocType>], RxDocumentData<RxDocType>> = new Map();\n        const docsInDbWithLokiKey: Map<\n            RxDocumentData<RxDocType>[StringKeys<RxDocType>],\n            RxDocumentData<RxDocType> & { $loki: number; }\n        > = new Map();\n        documentWrites.forEach(writeRow => {\n            const id = writeRow.document[this.primaryPath];\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n            if (documentInDb) {\n                docsInDbWithLokiKey.set(id as any, documentInDb);\n                docsInDb.set(id as any, stripLokiKey(documentInDb));\n            }\n        });\n\n        const categorized = categorizeBulkWriteRows<RxDocType>(\n            this,\n            this.primaryPath as any,\n            docsInDb,\n            documentWrites,\n            context\n        );\n        ret.error = categorized.errors;\n\n        categorized.bulkInsertDocs.forEach(writeRow => {\n            localState.collection.insert(flatClone(writeRow.document));\n            ret.success.push(writeRow.document);\n        });\n        categorized.bulkUpdateDocs.forEach(writeRow => {\n            const docId = writeRow.document[this.primaryPath];\n            const documentInDbWithLokiKey = getFromMapOrThrow(docsInDbWithLokiKey, docId as any);\n            const writeDoc: any = Object.assign(\n                {},\n                writeRow.document,\n                {\n                    $loki: documentInDbWithLokiKey.$loki\n                }\n            );\n            localState.collection.update(writeDoc);\n            ret.success.push(writeRow.document);\n        });\n        localState.databaseState.saveQueue.addWrite();\n\n        if (categorized.eventBulk.events.length > 0) {\n            const lastState = ensureNotFalsy(categorized.newestRow).document;\n            categorized.eventBulk.checkpoint = {\n                id: lastState[this.primaryPath],\n                lwt: lastState._meta.lwt\n            };\n            categorized.eventBulk.endTime = now();\n            this.changes$.next(categorized.eventBulk);\n        }\n\n        return ret;\n    }\n    async findDocumentsById(ids: string[], deleted: boolean): Promise<RxDocumentData<RxDocType>[]> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'findDocumentsById', [ids, deleted]);\n        }\n\n        const ret: RxDocumentData<RxDocType>[] = [];\n        ids.forEach(id => {\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n            if (\n                documentInDb &&\n                (!documentInDb._deleted || deleted)\n            ) {\n                ret.push(stripLokiKey(documentInDb));\n            }\n        });\n        return ret;\n    }\n    async query(preparedQuery: MangoQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'query', [preparedQuery]);\n        }\n\n        if (preparedQuery.selector) {\n            preparedQuery = flatClone(preparedQuery);\n            preparedQuery.selector = transformRegexToRegExp(preparedQuery.selector);\n        }\n\n        let query = localState.collection\n            .chain()\n            .find(preparedQuery.selector);\n\n        if (preparedQuery.sort) {\n            query = query.sort(getLokiSortComparator(this.schema, preparedQuery));\n        }\n\n\n\n\n        /**\n         * Offset must be used before limit in LokiJS\n         * @link https://github.com/techfort/LokiJS/issues/570\n         */\n        if (preparedQuery.skip) {\n            query = query.offset(preparedQuery.skip);\n        }\n\n        if (preparedQuery.limit) {\n            query = query.limit(preparedQuery.limit);\n        }\n\n        let foundDocuments = query.data().map((lokiDoc: any) => stripLokiKey(lokiDoc));\n\n\n        /**\n         * LokiJS returned wrong results on some queries\n         * with complex indexes. Therefore we run the query-match\n         * over all result docs to patch this bug.\n         * TODO create an issue at the LokiJS repository.\n         */\n        const queryMatcher = getQueryMatcher(\n            this.schema,\n            preparedQuery as any\n        );\n        foundDocuments = foundDocuments.filter((d: any) => queryMatcher(d));\n\n        return {\n            documents: foundDocuments\n        };\n    }\n    async count(\n        preparedQuery: MangoQuery<RxDocType>\n    ): Promise<RxStorageCountResult> {\n        const result = await this.query(preparedQuery);\n        return {\n            count: result.documents.length,\n            mode: 'fast'\n        };\n    }\n    getAttachmentData(_documentId: string, _attachmentId: string, _digest: string): Promise<string> {\n        throw new Error('Attachments are not implemented in the lokijs RxStorage. Make a pull request.');\n    }\n\n\n    async info(): Promise<RxStorageInfoResult> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'info', []);\n        }\n        return {\n            totalCount: localState.collection.count()\n        };\n    }\n\n\n    async getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: RxStorageDefaultCheckpoint | null\n    ): Promise<{\n        documents: RxDocumentData<RxDocType>[];\n        checkpoint: RxStorageDefaultCheckpoint;\n    }> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'getChangedDocumentsSince', [limit, checkpoint]);\n        }\n\n        const sinceLwt = checkpoint ? checkpoint.lwt : RX_META_LWT_MINIMUM;\n        const query = localState.collection\n            .chain()\n            .find({\n                '_meta.lwt': {\n                    $gte: sinceLwt\n                }\n            })\n            .sort(getSortDocumentsByLastWriteTimeComparator(this.primaryPath as any));\n        let changedDocs = query.data();\n\n        const first = changedDocs[0];\n        if (\n            checkpoint &&\n            first &&\n            first[this.primaryPath] === checkpoint.id &&\n            first._meta.lwt === checkpoint.lwt\n        ) {\n            changedDocs.shift();\n        }\n\n        changedDocs = changedDocs.slice(0, limit);\n        const lastDoc = lastOfArray(changedDocs);\n        return {\n            documents: changedDocs.map((docData: any) => stripLokiKey(docData)),\n            checkpoint: lastDoc ? {\n                id: (lastDoc as any)[this.primaryPath],\n                lwt: (lastDoc as any)._meta.lwt\n            } : checkpoint ? checkpoint : {\n                id: '',\n                lwt: 0\n            }\n        };\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> {\n        return this.changes$.asObservable();\n    }\n\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'cleanup', [minimumDeletedTime]);\n        }\n\n        const deleteAmountPerRun = 10;\n        const maxDeletionTime = now() - minimumDeletedTime;\n        const query = localState.collection\n            .chain()\n            .find({\n                _deleted: true,\n                '_meta.lwt': {\n                    $lt: maxDeletionTime\n                }\n            }).limit(deleteAmountPerRun);\n        const foundDocuments = query.data();\n        if (foundDocuments.length > 0) {\n            localState.collection.remove(foundDocuments);\n            localState.databaseState.saveQueue.addWrite();\n        }\n\n        return foundDocuments.length !== deleteAmountPerRun;\n    }\n\n    async close(): Promise<void> {\n        if (this.closed) {\n            return this.closed;\n        }\n        this.closed = (async () => {\n            this.changes$.complete();\n            OPEN_LOKIJS_STORAGE_INSTANCES.delete(this);\n            if (this.internals.localState) {\n                const localState = await this.internals.localState;\n                const dbState = await getLokiDatabase(\n                    this.databaseName,\n                    this.databaseSettings\n                );\n                await dbState.saveQueue.run();\n                await closeLokiCollections(\n                    this.databaseName,\n                    [\n                        localState.collection\n                    ]\n                );\n            }\n        })();\n        return this.closed;\n    }\n    async remove(): Promise<void> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'remove', []);\n        }\n        localState.databaseState.database.removeCollection(localState.collection.name);\n        await localState.databaseState.saveQueue.run();\n        return this.close();\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject();\n    }\n    async resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> { }\n\n}\n\nexport async function createLokiLocalState<RxDocType>(\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<LokiLocalDatabaseState> {\n    if (!params.options) {\n        params.options = {};\n    }\n\n    const databaseState = await getLokiDatabase(\n        params.databaseName,\n        databaseSettings\n    );\n\n    /**\n     * Construct loki indexes from RxJsonSchema indexes.\n     * TODO what about compound indexes? Are they possible in lokijs?\n     */\n    const indices: string[] = [];\n    if (params.schema.indexes) {\n        params.schema.indexes.forEach(idx => {\n            if (!isMaybeReadonlyArray(idx)) {\n                indices.push(idx);\n            }\n        });\n    }\n    /**\n     * LokiJS has no concept of custom primary key, they use a number-id that is generated.\n     * To be able to query fast by primary key, we always add an index to the primary.\n     */\n    const primaryKey = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\n    indices.push(primaryKey as string);\n\n    const lokiCollectionName = params.collectionName + '-' + params.schema.version;\n    const collectionOptions: Partial<any> = Object.assign(\n        {},\n        lokiCollectionName,\n        {\n            indices: indices as string[],\n            unique: [primaryKey]\n        } as any,\n        LOKIJS_COLLECTION_DEFAULT_OPTIONS\n    );\n\n    const collection: any = databaseState.database.addCollection(\n        lokiCollectionName,\n        collectionOptions as any\n    );\n    databaseState.collections[params.collectionName] = collection;\n    const ret: LokiLocalDatabaseState = {\n        databaseState,\n        collection\n    };\n\n    return ret;\n}\n\n\nexport async function createLokiStorageInstance<RxDocType>(\n    storage: RxStorageLoki,\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<RxStorageInstanceLoki<RxDocType>> {\n    const internals: LokiStorageInternals = {};\n\n    const broadcastChannelRefObject: DeepReadonly<any> = {};\n\n\n    if (params.multiInstance) {\n        const leaderElector = getLokiLeaderElector(\n            params.databaseInstanceToken,\n            broadcastChannelRefObject,\n            params.databaseName\n        );\n        internals.leaderElector = leaderElector;\n    } else {\n        // optimisation shortcut, directly create db is non multi instance.\n        internals.localState = createLokiLocalState(params, databaseSettings);\n        await internals.localState;\n    }\n\n    const instance = new RxStorageInstanceLoki(\n        params.databaseInstanceToken,\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        databaseSettings\n    );\n\n    await addRxStorageMultiInstanceSupport(\n        RX_STORAGE_NAME_LOKIJS,\n        params,\n        instance,\n        internals.leaderElector ? internals.leaderElector.broadcastChannel : undefined\n    );\n\n    if (params.multiInstance) {\n        /**\n         * Clean up the broadcast-channel reference on close()\n         */\n        const closeBefore = instance.close.bind(instance);\n        instance.close = function () {\n            removeBroadcastChannelReference(\n                params.databaseInstanceToken,\n                broadcastChannelRefObject\n            );\n            return closeBefore();\n        };\n        const removeBefore = instance.remove.bind(instance);\n        instance.remove = function () {\n            removeBroadcastChannelReference(\n                params.databaseInstanceToken,\n                broadcastChannelRefObject\n            );\n            return removeBefore();\n        };\n\n        /**\n         * Directly create the localState when/if the db becomes leader.\n         */\n        ensureNotFalsy(internals.leaderElector)\n            .awaitLeadership()\n            .then(() => {\n                if (!instance.closed) {\n                    mustUseLocalState(instance);\n                }\n            });\n    }\n\n\n    return instance;\n}\n"],"mappings":"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"}