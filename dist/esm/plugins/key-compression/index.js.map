{"version":3,"file":"index.js","names":["createCompressionTable","compressObject","decompressObject","compressedPath","DEFAULT_COMPRESSION_FLAG","createCompressedJsonSchema","compressQuery","overwritable","wrapRxStorageInstance","getPrimaryFieldOfPrimaryKey","flatCloneDocWithMeta","flatClone","getFromMapOrCreate","isMaybeReadonlyArray","COMPRESSION_STATE_BY_SCHEMA","WeakMap","getCompressionStateByRxJsonSchema","schema","deepFreezeWhenDevMode","compressionSchema","primaryKey","table","compressedSchema","composedPrimary","newComposedPrimary","key","fields","map","field","separator","indexes","newIndexes","idx","subIdx","compressionState","wrappedKeyCompressionStorage","args","statics","Object","assign","storage","prepareQuery","mutateableQuery","keyCompression","createStorageInstance","params","modifyToStorage","docData","compressDocumentData","modifyFromStorage","decompressDocumentData","childSchema","instance","attachments","_attachments"],"sources":["../../../../src/plugins/key-compression/index.ts"],"sourcesContent":["/**\n * this plugin adds the keycompression-capabilities to rxdb\n * if you don't use this, ensure that you set disableKeyCompression to false in your schema\n */\n\nimport {\n    createCompressionTable,\n    CompressionTable,\n    JsonSchema as KeyCompressionJsonSchema,\n    compressObject,\n    decompressObject,\n    compressedPath,\n    DEFAULT_COMPRESSION_FLAG,\n    createCompressedJsonSchema,\n    compressQuery\n} from 'jsonschema-key-compression';\nimport {\n    overwritable\n} from '../../overwritable.ts';\nimport { wrapRxStorageInstance } from '../../plugin-helpers.ts';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper.ts';\nimport { flatCloneDocWithMeta } from '../../rx-storage-helper.ts';\n\nimport type {\n    RxJsonSchema,\n    CompositePrimaryKey,\n    RxStorage,\n    RxStorageInstanceCreationParams,\n    RxDocumentData,\n    RxStorageStatics,\n    FilledMangoQuery,\n    PreparedQuery,\n    RxDocumentWriteData\n} from '../../types/index.d.ts';\nimport {\n    flatClone,\n    getFromMapOrCreate,\n    isMaybeReadonlyArray\n} from '../../plugins/utils/index.ts';\n\ndeclare type CompressionState = {\n    table: CompressionTable;\n    schema: RxJsonSchema<any>;\n    compressedSchema: RxJsonSchema<any>;\n};\n\n/**\n * Cache the compression table and the compressed schema\n * by the storage instance for better performance.\n */\nconst COMPRESSION_STATE_BY_SCHEMA: WeakMap<\n    RxJsonSchema<any>,\n    CompressionState\n> = new WeakMap();\n\n\nexport function getCompressionStateByRxJsonSchema(\n    schema: RxJsonSchema<any>\n): CompressionState {\n    /**\n     * Because we cache the state by the JsonSchema,\n     * it must be assured that the given schema object\n     * is never mutated.\n     */\n    overwritable.deepFreezeWhenDevMode(schema);\n\n    return getFromMapOrCreate(\n        COMPRESSION_STATE_BY_SCHEMA,\n        schema,\n        () => {\n            const compressionSchema: KeyCompressionJsonSchema = flatClone(schema) as any;\n            delete (compressionSchema as any).primaryKey;\n\n            const table = createCompressionTable(\n                compressionSchema,\n                DEFAULT_COMPRESSION_FLAG,\n                [\n                    /**\n                     * Do not compress the primary field\n                     * for easier debugging.\n                     */\n                    getPrimaryFieldOfPrimaryKey(schema.primaryKey),\n                    '_rev',\n                    '_attachments',\n                    '_deleted',\n                    '_meta'\n                ]\n            );\n\n            delete (compressionSchema as any).primaryKey;\n            const compressedSchema: RxJsonSchema<any> = createCompressedJsonSchema(\n                table,\n                compressionSchema\n            ) as RxJsonSchema<any>;\n\n            // also compress primary key\n            if (typeof schema.primaryKey !== 'string') {\n                const composedPrimary: CompositePrimaryKey<any> = schema.primaryKey;\n                const newComposedPrimary: CompositePrimaryKey<any> = {\n                    key: compressedPath(table, composedPrimary.key as string),\n                    fields: composedPrimary.fields.map(field => compressedPath(table, field as string)),\n                    separator: composedPrimary.separator\n                };\n                compressedSchema.primaryKey = newComposedPrimary;\n            } else {\n                compressedSchema.primaryKey = compressedPath(table, schema.primaryKey);\n            }\n\n            /**\n             * the key compression module does not know about indexes\n             * in the schema, so we have to also compress them here.\n             */\n            if (schema.indexes) {\n                const newIndexes = schema.indexes.map(idx => {\n                    if (isMaybeReadonlyArray(idx)) {\n                        return idx.map(subIdx => compressedPath(table, subIdx));\n                    } else {\n                        return compressedPath(table, idx);\n                    }\n                });\n                compressedSchema.indexes = newIndexes;\n            }\n\n            const compressionState = {\n                table,\n                schema,\n                compressedSchema\n            };\n            return compressionState;\n        }\n    );\n}\n\nexport function wrappedKeyCompressionStorage<Internals, InstanceCreationOptions>(\n    args: {\n        storage: RxStorage<Internals, InstanceCreationOptions>;\n    }\n): RxStorage<Internals, InstanceCreationOptions> {\n    const statics: RxStorageStatics = Object.assign(\n        {},\n        args.storage.statics,\n        {\n            prepareQuery<RxDocType>(\n                schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n                mutateableQuery: FilledMangoQuery<RxDocType>\n            ): PreparedQuery<RxDocType> {\n                if (schema.keyCompression) {\n                    const compressionState = getCompressionStateByRxJsonSchema(schema);\n                    mutateableQuery = compressQuery(\n                        compressionState.table,\n                        mutateableQuery as any\n                    ) as any;\n                    return args.storage.statics.prepareQuery(\n                        compressionState.compressedSchema,\n                        mutateableQuery\n                    );\n                }\n                return args.storage.statics.prepareQuery(\n                    schema,\n                    mutateableQuery\n                );\n            }\n        }\n    );\n\n    return Object.assign(\n        {},\n        args.storage,\n        {\n            statics,\n            async createStorageInstance<RxDocType>(\n                params: RxStorageInstanceCreationParams<RxDocType, any>\n            ) {\n                if (!params.schema.keyCompression) {\n                    return args.storage.createStorageInstance(params);\n                }\n\n                const compressionState = getCompressionStateByRxJsonSchema(params.schema);\n                function modifyToStorage(docData: RxDocumentWriteData<RxDocType>) {\n                    return compressDocumentData(compressionState, docData);\n                }\n                function modifyFromStorage(docData: RxDocumentData<any>): Promise<RxDocumentData<RxDocType>> {\n                    return decompressDocumentData(compressionState, docData);\n                }\n\n                /**\n                 * Because this wrapper resolves the key-compression,\n                 * we can set the flag to false\n                 * which allows underlying storages to detect wrong configurations\n                 * like when keyCompression is set to false but no key-compression module is used.\n                 */\n                const childSchema = flatClone(compressionState.compressedSchema);\n                childSchema.keyCompression = false;\n\n                const instance = await args.storage.createStorageInstance(\n                    Object.assign(\n                        {},\n                        params,\n                        {\n                            schema: childSchema\n                        }\n                    )\n                );\n\n                return wrapRxStorageInstance(\n                    params.schema,\n                    instance,\n                    modifyToStorage,\n                    modifyFromStorage\n                );\n            }\n        }\n    );\n}\n\nexport function compressDocumentData(\n    compressionState: CompressionState,\n    docData: RxDocumentData<any>\n): RxDocumentData<any> {\n    /**\n     * Do not send attachments to compressObject()\n     * because it will deep clone which does not work on Blob or Buffer.\n     */\n    docData = flatCloneDocWithMeta(docData);\n    const attachments = docData._attachments;\n    delete docData._attachments;\n\n    docData = compressObject(\n        compressionState.table,\n        docData\n    );\n    docData._attachments = attachments;\n    return docData;\n}\n\nexport function decompressDocumentData(\n    compressionState: CompressionState,\n    docData: RxDocumentData<any>\n): RxDocumentData<any> {\n    return decompressObject(\n        compressionState.table,\n        docData\n    );\n}\n"],"mappings":"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"}