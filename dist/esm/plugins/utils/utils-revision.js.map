{"version":3,"file":"utils-revision.js","names":["parseRevision","revision","split","length","Error","height","parseInt","hash","getHeightOfRevision","ret","createRevision","databaseInstanceToken","previousDocData","newRevisionHeight","_rev"],"sources":["../../../../src/plugins/utils/utils-revision.ts"],"sourcesContent":["import type {\n    RxDocumentData\n} from '../../types/index.d.ts';\n\nexport function parseRevision(revision: string): { height: number; hash: string; } {\n    const split = revision.split('-');\n    if (split.length !== 2) {\n        throw new Error('malformatted revision: ' + revision);\n    }\n    return {\n        height: parseInt(split[0], 10),\n        hash: split[1]\n    };\n}\n\n/**\n * @hotPath\n */\nexport function getHeightOfRevision(revision: string): number {\n    const ret = parseInt(revision.split('-')[0], 10);\n    return ret;\n}\n\n\n/**\n * Creates the next write revision for a given document.\n */\nexport function createRevision<RxDocType>(\n    databaseInstanceToken: string,\n    previousDocData?: RxDocumentData<RxDocType>\n): string {\n    const newRevisionHeight = !previousDocData ? 1 : getHeightOfRevision(previousDocData._rev) + 1\n    return newRevisionHeight + '-' + databaseInstanceToken;\n}\n\n"],"mappings":"AAIA,OAAO,SAASA,aAAaA,CAACC,QAAgB,EAAqC;EAC/E,IAAMC,KAAK,GAAGD,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC;EACjC,IAAIA,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IACpB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,GAAGH,QAAQ,CAAC;EACzD;EACA,OAAO;IACHI,MAAM,EAAEC,QAAQ,CAACJ,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAC9BK,IAAI,EAAEL,KAAK,CAAC,CAAC;EACjB,CAAC;AACL;;AAEA;AACA;AACA;AACA,OAAO,SAASM,mBAAmBA,CAACP,QAAgB,EAAU;EAC1D,IAAMQ,GAAG,GAAGH,QAAQ,CAACL,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;EAChD,OAAOO,GAAG;AACd;;AAGA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAC1BC,qBAA6B,EAC7BC,eAA2C,EACrC;EACN,IAAMC,iBAAiB,GAAG,CAACD,eAAe,GAAG,CAAC,GAAGJ,mBAAmB,CAACI,eAAe,CAACE,IAAI,CAAC,GAAG,CAAC;EAC9F,OAAOD,iBAAiB,GAAG,GAAG,GAAGF,qBAAqB;AAC1D","ignoreList":[]}