{"version":3,"file":"graphql-websocket.js","names":["createClient","getFromMapOrCreate","getFromMapOrThrow","ws","WebSocket","IsomorphicWebSocket","GRAPHQL_WEBSOCKET_BY_URL","Map","getGraphQLWebSocket","url","headers","options","has","wsClient","shouldRetry","webSocketImpl","connectionParams","undefined","socket","refCount","value","removeGraphQLWebSocketRef","obj","delete","dispose"],"sources":["../../../../src/plugins/replication-graphql/graphql-websocket.ts"],"sourcesContent":["import { Client, createClient } from 'graphql-ws';\nimport { getFromMapOrCreate, getFromMapOrThrow } from '../../plugins/utils/index.ts';\nimport ws from 'isomorphic-ws';\nimport { RxGraphQLPullWSOptions } from '../../types';\n\nconst { WebSocket: IsomorphicWebSocket } = ws;\n\nexport type WebsocketWithRefCount = {\n    url: string;\n    socket: Client;\n    refCount: number;\n};\n\nexport const GRAPHQL_WEBSOCKET_BY_URL: Map<string, WebsocketWithRefCount> = new Map();\n\n\nexport function getGraphQLWebSocket(\n    url: string,\n    headers?: { [k: string]: string; },\n    options: RxGraphQLPullWSOptions = {},\n): Client {\n\n    const has = getFromMapOrCreate(\n        GRAPHQL_WEBSOCKET_BY_URL,\n        url,\n        () => {\n            const wsClient = createClient({\n                ...options,\n                url,\n                shouldRetry: () => true,\n                webSocketImpl: IsomorphicWebSocket,\n                connectionParams: headers ? { headers } : undefined,\n            });\n            return {\n                url,\n                socket: wsClient,\n                refCount: 1\n            };\n        },\n        (value) => {\n            value.refCount = value.refCount + 1;\n        }\n    );\n    return has.socket;\n}\n\n\nexport function removeGraphQLWebSocketRef(\n    url: string\n) {\n    const obj = getFromMapOrThrow(GRAPHQL_WEBSOCKET_BY_URL, url);\n    obj.refCount = obj.refCount - 1;\n    if (obj.refCount === 0) {\n        GRAPHQL_WEBSOCKET_BY_URL.delete(url);\n        obj.socket.dispose();\n    }\n}\n"],"mappings":"AAAA,SAAiBA,YAAY,QAAQ,YAAY;AACjD,SAASC,kBAAkB,EAAEC,iBAAiB,QAAQ,8BAA8B;AACpF,OAAOC,EAAE,MAAM,eAAe;AAG9B,IAAM;EAAEC,SAAS,EAAEC;AAAoB,CAAC,GAAGF,EAAE;AAQ7C,OAAO,IAAMG,wBAA4D,GAAG,IAAIC,GAAG,CAAC,CAAC;AAGrF,OAAO,SAASC,mBAAmBA,CAC/BC,GAAW,EACXC,OAAkC,EAClCC,OAA+B,GAAG,CAAC,CAAC,EAC9B;EAEN,IAAMC,GAAG,GAAGX,kBAAkB,CAC1BK,wBAAwB,EACxBG,GAAG,EACH,MAAM;IACF,IAAMI,QAAQ,GAAGb,YAAY,CAAC;MAC1B,GAAGW,OAAO;MACVF,GAAG;MACHK,WAAW,EAAEA,CAAA,KAAM,IAAI;MACvBC,aAAa,EAAEV,mBAAmB;MAClCW,gBAAgB,EAAEN,OAAO,GAAG;QAAEA;MAAQ,CAAC,GAAGO;IAC9C,CAAC,CAAC;IACF,OAAO;MACHR,GAAG;MACHS,MAAM,EAAEL,QAAQ;MAChBM,QAAQ,EAAE;IACd,CAAC;EACL,CAAC,EACAC,KAAK,IAAK;IACPA,KAAK,CAACD,QAAQ,GAAGC,KAAK,CAACD,QAAQ,GAAG,CAAC;EACvC,CACJ,CAAC;EACD,OAAOP,GAAG,CAACM,MAAM;AACrB;AAGA,OAAO,SAASG,yBAAyBA,CACrCZ,GAAW,EACb;EACE,IAAMa,GAAG,GAAGpB,iBAAiB,CAACI,wBAAwB,EAAEG,GAAG,CAAC;EAC5Da,GAAG,CAACH,QAAQ,GAAGG,GAAG,CAACH,QAAQ,GAAG,CAAC;EAC/B,IAAIG,GAAG,CAACH,QAAQ,KAAK,CAAC,EAAE;IACpBb,wBAAwB,CAACiB,MAAM,CAACd,GAAG,CAAC;IACpCa,GAAG,CAACJ,MAAM,CAACM,OAAO,CAAC,CAAC;EACxB;AACJ","ignoreList":[]}