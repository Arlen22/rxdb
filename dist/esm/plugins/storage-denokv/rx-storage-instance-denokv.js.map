{"version":3,"file":"rx-storage-instance-denokv.js","names":["Subject","getPrimaryFieldOfPrimaryKey","addRxStorageMultiInstanceSupport","CLEANUP_INDEX","DENOKV_DOCUMENT_ROOT_PATH","RX_STORAGE_NAME_DENOKV","getDenoGlobal","getDenoKVIndexName","getIndexableStringMonad","getStartIndexStringFromLowerBound","changeIndexableStringByOneQuantum","appendToArray","batchArray","lastOfArray","toArray","ensureNotFalsy","categorizeBulkWriteRows","now","queryDenoKV","INDEX_MAX","PROMISE_RESOLVE_VOID","flatClone","RxStorageInstanceDenoKV","storage","databaseName","collectionName","schema","internals","options","settings","keySpace","version","join","kvOptions","consistency","consistencyLevel","changes$","primaryPath","primaryKey","kvPromise","openKv","openKvPath","then","kv","set","_proto","prototype","retryUntilNoWriteInBetween","fn","writeBlockKeyBefore","get","writeBlockValueBefore","value","result","writeBlockKeyAfter","writeBlockValueAfter","bulkWrite","documentWrites","context","_this","ret","success","error","batches","batchSize","writeBatch","_loop","writeBlockKey","docsInDB","Map","readManyBatches","Promise","all","map","readManyBatch","docsResult","getMany","writeRow","docId","document","row","docData","categorized","tx","atomic","check","bulkInsertDocs","forEach","push","Object","values","indexes","indexMeta","indexString","getIndexableString","indexId","bulkUpdateDocs","oldIndexString","previous","newIndexString","delete","txResult","commit","ok","errors","eventBulk","events","length","lastState","newestRow","checkpoint","id","lwt","_meta","endTime","next","findDocumentsById","ids","withDeleted","kvKey","findSingleResult","docInDb","_deleted","query","preparedQuery","count","documents","mode","info","range","list","start","end","totalCount","res","getAttachmentData","documentId","attachmentId","digest","Error","getChangedDocumentsSince","limit","index","indexName","lowerBoundString","checkpointPartialDoc","docIds","batch","docs","lastDoc","changeStream","asObservable","cleanup","minimumDeletedTime","_this2","maxDeletionTime","upperBoundString","noMoreUndeleted","rangeCount","_loop2","docDataResult","indexMetaInner","_ret","close","closed","complete","remove","ensureNotClosed","promises","key","conflictResultionTasks","resolveConflictResultionTask","_taskSolution","createDenoKVStorageInstance","params","indexDBs","useIndexes","slice","useIndexesFinal","indexAr","unshift","instance","resolve"],"sources":["../../../../src/plugins/storage-denokv/rx-storage-instance-denokv.ts"],"sourcesContent":["\nimport {\n    Subject,\n    Observable\n} from 'rxjs';\nimport type {\n    RxStorageInstance,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageQueryResult,\n    RxJsonSchema,\n    RxStorageInstanceCreationParams,\n    EventBulk,\n    StringKeys,\n    RxConflictResultionTaskSolution,\n    RxStorageDefaultCheckpoint,\n    RxStorageCountResult,\n    RxStorageInfoResult,\n    RxConflictResultionTask\n} from '../../types/index.d.ts';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper.ts';\nimport { addRxStorageMultiInstanceSupport } from '../../rx-storage-multiinstance.ts';\nimport type { DenoKVIndexMeta, DenoKVPreparedQuery, DenoKVSettings, DenoKVStorageInternals } from './denokv-types.ts';\nimport { RxStorageDenoKV } from './index.ts';\nimport { CLEANUP_INDEX, DENOKV_DOCUMENT_ROOT_PATH, RX_STORAGE_NAME_DENOKV, getDenoGlobal, getDenoKVIndexName } from \"./denokv-helper.ts\";\nimport { getIndexableStringMonad, getStartIndexStringFromLowerBound, changeIndexableStringByOneQuantum } from \"../../custom-index.ts\";\nimport { appendToArray, batchArray, lastOfArray, toArray } from \"../utils/utils-array.ts\";\nimport { ensureNotFalsy } from \"../utils/utils-other.ts\";\nimport { randomCouchString } from \"../utils/utils-string.ts\";\nimport { categorizeBulkWriteRows } from \"../../rx-storage-helper.ts\";\nimport { now } from \"../utils/utils-time.ts\";\nimport { queryDenoKV } from \"./denokv-query.ts\";\nimport { INDEX_MAX } from \"../../query-planner.ts\";\nimport { PROMISE_RESOLVE_VOID } from \"../utils/utils-promise.ts\";\nimport { flatClone } from \"../utils/utils-object.ts\";\n\n\n\nexport class RxStorageInstanceDenoKV<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    DenoKVStorageInternals<RxDocType>,\n    DenoKVSettings,\n    RxStorageDefaultCheckpoint\n> {\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n    public closed?: Promise<void>;\n    public readonly kvPromise: Promise<any>;\n\n    constructor(\n        public readonly storage: RxStorageDenoKV,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: DenoKVStorageInternals<RxDocType>,\n        public readonly options: Readonly<DenoKVSettings>,\n        public readonly settings: DenoKVSettings,\n        public readonly keySpace = ['rxdb', databaseName, collectionName, schema.version].join('|'),\n        public readonly kvOptions = { consistency: settings.consistencyLevel }\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        this.kvPromise = getDenoGlobal().openKv(settings.openKvPath).then(async (kv: any) => {\n            // insert writeBlockKey\n            await kv.set([this.keySpace], 1);\n            return kv;\n        });\n    }\n\n    /**\n     * DenoKV has no transactions\n     * so we have to ensure that there is no write in between our queries\n     * which would confuse RxDB and return wrong query results.\n     */\n    async retryUntilNoWriteInBetween<T>(\n        fn: () => Promise<T>\n    ): Promise<T> {\n        const kv = await this.kvPromise;\n        while (true) {\n            const writeBlockKeyBefore = await kv.get([this.keySpace], this.kvOptions);\n            const writeBlockValueBefore = writeBlockKeyBefore ? writeBlockKeyBefore.value : -1;\n            const result = await fn();\n            const writeBlockKeyAfter = await kv.get([this.keySpace], this.kvOptions);\n            const writeBlockValueAfter = writeBlockKeyAfter ? writeBlockKeyAfter.value : -1;\n\n            if (writeBlockValueBefore === writeBlockValueAfter) {\n                return result;\n            }\n        }\n    }\n\n    async bulkWrite(documentWrites: BulkWriteRow<RxDocType>[], context: string): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        const kv = await this.kvPromise;\n        const primaryPath = this.primaryPath;\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: [],\n            error: []\n        };\n\n        const batches = batchArray(documentWrites, ensureNotFalsy(this.settings.batchSize));\n\n        /**\n         * DenoKV does not have transactions\n         * so we use a special writeBlock row to ensure\n         * atomic writes (per document)\n         * and so that we can do bulkWrites\n         */\n        for (const writeBatch of batches) {\n            while (true) {\n                const writeBlockKey = await kv.get([this.keySpace], this.kvOptions);\n                const docsInDB = new Map<string, RxDocumentData<RxDocType>>();\n\n                /**\n                 * TODO the max amount for .getMany() is 10 which is defined by deno itself.\n                 * How can this be increased?\n                 */\n                const readManyBatches = batchArray(writeBatch, 10);\n                await Promise.all(\n                    readManyBatches.map(async (readManyBatch) => {\n                        const docsResult = await kv.getMany(\n                            readManyBatch.map(writeRow => {\n                                const docId: string = writeRow.document[primaryPath] as any;\n                                return [this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId];\n                            })\n                        );\n                        docsResult.map((row: any) => {\n                            const docData = row.value;\n                            if (!docData) {\n                                return;\n                            }\n                            const docId: string = docData[primaryPath] as any;\n                            docsInDB.set(docId, docData);\n                        });\n                    })\n                );\n                const categorized = categorizeBulkWriteRows<RxDocType>(\n                    this,\n                    this.primaryPath as any,\n                    docsInDB,\n                    writeBatch,\n                    context\n                );\n\n                let tx = kv.atomic();\n                tx = tx.set([this.keySpace], ensureNotFalsy(writeBlockKey.value) + 1);\n                tx = tx.check(writeBlockKey);\n\n                // INSERTS\n                categorized.bulkInsertDocs.forEach(writeRow => {\n                    const docId: string = writeRow.document[this.primaryPath] as any;\n                    ret.success.push(writeRow.document);\n\n                    // insert document data\n                    tx = tx.set([this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId], writeRow.document);\n\n                    // insert secondary indexes\n                    Object.values(this.internals.indexes).forEach(indexMeta => {\n                        const indexString = indexMeta.getIndexableString(writeRow.document as any);\n                        tx = tx.set([this.keySpace, indexMeta.indexId, indexString], docId);\n                    });\n                });\n                // UPDATES\n                categorized.bulkUpdateDocs.forEach((writeRow: BulkWriteRow<RxDocType>) => {\n                    const docId: string = writeRow.document[this.primaryPath] as any;\n\n                    // insert document data\n                    tx = tx.set([this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId], writeRow.document);\n\n                    // insert secondary indexes\n                    Object.values(this.internals.indexes).forEach(indexMeta => {\n                        const oldIndexString = indexMeta.getIndexableString(ensureNotFalsy(writeRow.previous));\n                        const newIndexString = indexMeta.getIndexableString(writeRow.document as any);\n                        if (oldIndexString !== newIndexString) {\n                            tx = tx.delete([this.keySpace, indexMeta.indexId, oldIndexString]);\n                            tx = tx.set([this.keySpace, indexMeta.indexId, newIndexString], docId);\n                        }\n                    });\n                    ret.success.push(writeRow.document as any);\n                });\n\n                const txResult = await tx.commit();\n                if (txResult.ok) {\n                    appendToArray(ret.error, categorized.errors);\n                    if (categorized.eventBulk.events.length > 0) {\n                        const lastState = ensureNotFalsy(categorized.newestRow).document;\n                        categorized.eventBulk.checkpoint = {\n                            id: lastState[primaryPath],\n                            lwt: lastState._meta.lwt\n                        };\n                        categorized.eventBulk.endTime = now();\n                        this.changes$.next(categorized.eventBulk);\n                    }\n                    break;\n                }\n            }\n        }\n        return ret;\n    }\n    async findDocumentsById(ids: string[], withDeleted: boolean): Promise<RxDocumentData<RxDocType>[]> {\n        const kv = await this.kvPromise;\n        const ret: RxDocumentData<RxDocType>[] = [];\n        await Promise.all(\n            ids.map(async (docId) => {\n                const kvKey = [this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId];\n                const findSingleResult = await kv.get(kvKey, this.kvOptions);\n                const docInDb = findSingleResult.value;\n                if (\n                    docInDb &&\n                    (\n                        !docInDb._deleted ||\n                        withDeleted\n                    )\n                ) {\n                    ret.push(docInDb);\n                }\n            })\n        );\n        return ret;\n    }\n    query(preparedQuery: DenoKVPreparedQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        return this.retryUntilNoWriteInBetween(\n            () => queryDenoKV(this, preparedQuery)\n        );\n    }\n    async count(preparedQuery: DenoKVPreparedQuery<RxDocType>): Promise<RxStorageCountResult> {\n        /**\n         * At this point in time (end 2023), DenoKV does not support\n         * range counts. So we have to run a normal query and use the result set length.\n         * @link https://github.com/denoland/deno/issues/18965\n         */\n        const result = await this.retryUntilNoWriteInBetween(\n            () => this.query(preparedQuery)\n        );\n        return {\n            count: result.documents.length,\n            mode: 'fast'\n        };\n    }\n    async info(): Promise<RxStorageInfoResult> {\n        return this.retryUntilNoWriteInBetween(\n            async () => {\n                const kv = await this.kvPromise;\n                const range = kv.list({\n                    start: [this.keySpace, DENOKV_DOCUMENT_ROOT_PATH],\n                    end: [this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, INDEX_MAX]\n                }, this.kvOptions);\n                let totalCount = 0;\n                for await (const res of range) {\n                    totalCount++;\n                }\n                return {\n                    totalCount\n                };\n            }\n        );\n    }\n    getAttachmentData(documentId: string, attachmentId: string, digest: string): Promise<string> {\n        throw new Error(\"Method not implemented.\");\n    }\n    async getChangedDocumentsSince(limit: number, checkpoint?: RxStorageDefaultCheckpoint | undefined): Promise<{ documents: RxDocumentData<RxDocType>[]; checkpoint: RxStorageDefaultCheckpoint; }> {\n        return this.retryUntilNoWriteInBetween(\n            async () => {\n                const kv = await this.kvPromise;\n                const index = [\n                    '_meta.lwt',\n                    this.primaryPath as any\n                ];\n                const indexName = getDenoKVIndexName(index);\n                const indexMeta = this.internals.indexes[indexName];\n                let lowerBoundString = '';\n                if (checkpoint) {\n                    const checkpointPartialDoc: any = {\n                        [this.primaryPath]: checkpoint.id,\n                        _meta: {\n                            lwt: checkpoint.lwt\n                        }\n                    };\n                    lowerBoundString = indexMeta.getIndexableString(checkpointPartialDoc);\n                    lowerBoundString = changeIndexableStringByOneQuantum(lowerBoundString, 1);\n                }\n\n                const range = kv.list({\n                    start: [this.keySpace, indexMeta.indexId, lowerBoundString],\n                    end: [this.keySpace, indexMeta.indexId, INDEX_MAX]\n                }, {\n                    consistency: this.settings.consistencyLevel,\n                    limit,\n                    batchSize: this.settings.batchSize\n                });\n                const docIds: any[] = [];\n                for await (const row of range) {\n                    const docId = row.value;\n                    docIds.push([this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId]);\n                }\n\n                /**\n                 * We have to run in batches because without it says\n                 * \"TypeError: too many ranges (max 10)\"\n                 */\n                const batches = batchArray(docIds, 10);\n                const result: RxDocumentData<RxDocType>[] = [];\n\n                for (const batch of batches) {\n                    const docs = await kv.getMany(batch);\n                    docs.forEach((row: any) => {\n                        const docData = row.value;\n                        result.push(docData as any);\n                    });\n                }\n\n                const lastDoc = lastOfArray(result);\n                return {\n                    documents: result,\n                    checkpoint: lastDoc ? {\n                        id: lastDoc[this.primaryPath] as any,\n                        lwt: lastDoc._meta.lwt\n                    } : checkpoint ? checkpoint : {\n                        id: '',\n                        lwt: 0\n                    }\n                };\n            });\n    }\n    changeStream() {\n        return this.changes$.asObservable();\n    }\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const maxDeletionTime = now() - minimumDeletedTime;\n        const kv = await this.kvPromise;\n        const index = CLEANUP_INDEX;\n        const indexName = getDenoKVIndexName(index);\n        const indexMeta = this.internals.indexes[indexName];\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            index,\n            [\n                true,\n                /**\n                 * Do not use 0 here,\n                 * because 1 is the minimum value for _meta.lwt\n                 */\n                1\n            ],\n            false\n        );\n        const upperBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            index,\n            [\n                true,\n                maxDeletionTime\n            ],\n            true\n        );\n        let noMoreUndeleted: boolean = true;\n\n        const range = kv.list({\n            start: [this.keySpace, indexMeta.indexId, lowerBoundString],\n            end: [this.keySpace, indexMeta.indexId, upperBoundString]\n        }, {\n            consistency: this.settings.consistencyLevel,\n            batchSize: this.settings.batchSize,\n            limit: this.settings.batchSize\n        });\n\n        let rangeCount = 0;\n        for await (const row of range) {\n            rangeCount = rangeCount + 1;\n            const docId = row.value;\n            const docDataResult = await kv.get([this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId], this.kvOptions);\n            if (!docDataResult.value) {\n                continue;\n            }\n            const docData = ensureNotFalsy(docDataResult.value);\n            if (\n                !docData._deleted ||\n                docData._meta.lwt > maxDeletionTime\n            ) {\n                continue;\n            }\n\n\n            let tx = kv.atomic();\n            tx = tx.check(docDataResult);\n            tx = tx.delete([this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId]);\n            Object\n                .values(this.internals.indexes)\n                .forEach(indexMetaInner => {\n                    tx = tx.delete([this.keySpace, indexMetaInner.indexId, docId]);\n                });\n            await tx.commit();\n        }\n        return noMoreUndeleted;\n    }\n    async close(): Promise<void> {\n        if (this.closed) {\n            return this.closed;\n        }\n        this.closed = (async () => {\n            this.changes$.complete();\n            const kv = await this.kvPromise;\n            await kv.close();\n        })();\n        return this.closed;\n    }\n    async remove(): Promise<void> {\n        ensureNotClosed(this);\n        const kv = await this.kvPromise;\n        const range = kv.list({\n            start: [this.keySpace],\n            end: [this.keySpace, INDEX_MAX]\n        }, {\n            consistency: this.settings.consistencyLevel,\n            batchSize: this.settings.batchSize\n        });\n        let promises: Promise<any>[] = [];\n        for await (const row of range) {\n            promises.push(kv.delete(row.key));\n        }\n\n        await Promise.all(promises);\n        return this.close();\n    }\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject<any>().asObservable();\n    }\n    resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> {\n        return PROMISE_RESOLVE_VOID;\n    }\n}\n\n\n\nexport async function createDenoKVStorageInstance<RxDocType>(\n    storage: RxStorageDenoKV,\n    params: RxStorageInstanceCreationParams<RxDocType, DenoKVSettings>,\n    settings: DenoKVSettings\n): Promise<RxStorageInstanceDenoKV<RxDocType>> {\n    settings = flatClone(settings);\n    if (!settings.batchSize) {\n        settings.batchSize = 100;\n    }\n\n    const primaryPath = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\n\n    const indexDBs: { [indexName: string]: DenoKVIndexMeta<RxDocType>; } = {};\n    const useIndexes = params.schema.indexes ? params.schema.indexes.slice(0) : [];\n    useIndexes.push([primaryPath]);\n    const useIndexesFinal = useIndexes.map(index => {\n        const indexAr = toArray(index);\n        indexAr.unshift('_deleted');\n        return indexAr;\n    });\n    // used for `getChangedDocumentsSince()`\n    useIndexesFinal.push([\n        '_meta.lwt',\n        primaryPath\n    ]);\n    useIndexesFinal.push(CLEANUP_INDEX);\n    useIndexesFinal.forEach((indexAr, indexId) => {\n        const indexName = getDenoKVIndexName(indexAr);\n        indexDBs[indexName] = {\n            indexId: '|' + indexId + '|',\n            indexName,\n            getIndexableString: getIndexableStringMonad(params.schema, indexAr),\n            index: indexAr\n        };\n    });\n\n    const internals = {\n        indexes: indexDBs\n    };\n    const instance = new RxStorageInstanceDenoKV(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings\n    );\n\n    await addRxStorageMultiInstanceSupport(\n        RX_STORAGE_NAME_DENOKV,\n        params,\n        instance\n    );\n\n    return Promise.resolve(instance);\n}\n\n\n\nfunction ensureNotClosed(\n    instance: RxStorageInstanceDenoKV<any>\n) {\n    if (instance.closed) {\n        throw new Error('RxStorageInstanceDenoKV is closed ' + instance.databaseName + '-' + instance.collectionName);\n    }\n}\n"],"mappings":"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"}