{"version":3,"file":"rx-collection.js","names":["filter","map","mergeMap","ucfirst","flatClone","promiseSeries","pluginMissing","ensureNotFalsy","getFromMapOrThrow","PROMISE_RESOLVE_FALSE","PROMISE_RESOLVE_VOID","fillObjectDataBeforeInsert","createRxCollectionStorageInstance","removeCollectionStorages","ensureRxCollectionIsNotClosed","createRxQuery","_getDefaultQuery","newRxError","newRxTypeError","DocumentCache","mapDocumentsDataToCacheDocs","createQueryCache","defaultCacheReplacementPolicy","createChangeEventBuffer","runAsyncPluginHooks","runPluginHooks","createNewRxDocument","getRxDocumentConstructor","getWrappedStorageInstance","getWrittenDocumentsFromBulkWriteResponse","throwIfIsStorageWriteError","IncrementalWriteQueue","beforeDocumentUpdateWrite","overwritable","defaultConflictHandler","rxChangeEventBulkToRxChangeEvents","HOOKS_WHEN","HOOKS_KEYS","hooksApplied","RxCollectionBase","database","name","schema","internalStorageInstance","instanceCreationOptions","migrationStrategies","methods","attachments","options","cacheReplacementPolicy","statics","conflictHandler","storageInstance","timeouts","Set","incrementalWriteQueue","awaitBeforeReads","_incrementalUpsertQueues","Map","synced","hooks","_subs","_docCache","_queryCache","$","checkpoint$","_changeEventBuffer","eventBulks$","onClose","closed","onRemove","_applyHookFunctions","asRxCollection","pipe","changeEventBulk","collectionName","_proto","prototype","prepare","jsonSchema","primaryPath","newData","oldData","result","_runHooks","checkpoint","documentConstructor","bulk","isLocal","events","docData","listenToRemoveSub","internalStore","changeStream","key","version","found","find","event","documentData","context","operation","subscribe","close","Promise","all","fn","push","databaseStorageToken","storageToken","subDocs","eventBulk","id","internal","databaseToken","token","$emit","cleanup","_minimumDeletedTime","migrationNeeded","getMigrationState","startMigration","batchSize","migratePromise","insert","json","writeResult","bulkInsert","isError","error","insertResult","success","docsData","length","ids","insertRows","hasHooks","useDocData","then","add","document","Array","index","size","collection","args","documents","results","bulkWrite","rxDocuments","ret","docsMap","forEach","row","doc","set","get","primary","bulkRemove","idsOrDocs","rxDocumentMap","findByIds","exec","d","from","values","rxDocument","data","toMutableJSON","removeDocs","writeDoc","_deleted","previous","deletedRxDocuments","successIds","getCachedRxDocument","bulkUpsert","insertData","useJsonByDocId","useJson","slice","err","status","documentId","writeData","docDataInDb","documentInDb","getCachedRxDocuments","newDoc","incrementalModify","upsert","bulkResult","incrementalUpsert","queue","_incrementalUpsertEnsureRxDocumentExists","wasInserted","inserted","_incrementalUpsertUpdate","queryObj","op","query","findOne","selector","limit","count","mangoQuery","$in","exportJSON","importJSON","_exportedJSON","insertCRDT","_updateObj","addPipeline","_options","addHook","when","fun","parallel","includes","boundFun","bind","runName","series","getHooks","instance","tasks","hook","_runHooksSync","promiseWait","time","res","timeout","setTimeout","delete","clearTimeout","requestIdlePromise","sub","unsubscribe","collections","remove","storage","password","hashFunction","_createClass","cE","colProto","Object","getPrototypeOf","fnName","_innerDoc","rxCollection","docDataFromCache","getLatestDocumentDataIfExists","resolve","createRxCollection","autoMigrate","localDocuments","storageInstanceCreationParams","databaseInstanceToken","databaseName","multiInstance","devMode","isDevMode","entries","funName","defineProperty","creator","catch","reject","isRxCollection","obj"],"sources":["../../src/rx-collection.ts"],"sourcesContent":["import {\n    filter,\n    map,\n    mergeMap\n} from 'rxjs';\n\nimport {\n    ucfirst,\n    flatClone,\n    promiseSeries,\n    pluginMissing,\n    ensureNotFalsy,\n    getFromMapOrThrow,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_VOID\n} from './plugins/utils/index.ts';\nimport {\n    fillObjectDataBeforeInsert,\n    createRxCollectionStorageInstance,\n    removeCollectionStorages,\n    ensureRxCollectionIsNotClosed\n} from './rx-collection-helper.ts';\nimport {\n    createRxQuery,\n    _getDefaultQuery\n} from './rx-query.ts';\nimport {\n    newRxError,\n    newRxTypeError\n} from './rx-error.ts';\nimport type {\n    RxMigrationState\n} from './plugins/migration-schema/index.ts';\nimport {\n    DocumentCache,\n    mapDocumentsDataToCacheDocs\n} from './doc-cache.ts';\nimport {\n    QueryCache,\n    createQueryCache,\n    defaultCacheReplacementPolicy\n} from './query-cache.ts';\nimport {\n    ChangeEventBuffer,\n    createChangeEventBuffer\n} from './change-event-buffer.ts';\nimport {\n    runAsyncPluginHooks,\n    runPluginHooks\n} from './hooks.ts';\n\nimport {\n    Subscription,\n    Observable\n} from 'rxjs';\n\nimport type {\n    KeyFunctionMap,\n    RxCollection,\n    RxDatabase,\n    RxQuery,\n    RxDocument,\n    RxDumpCollection,\n    RxDumpCollectionAny,\n    MangoQuery,\n    MangoQueryNoLimit,\n    RxCacheReplacementPolicy,\n    RxStorageWriteError,\n    RxDocumentData,\n    RxStorageInstanceCreationParams,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxChangeEventInsert,\n    RxChangeEventUpdate,\n    RxChangeEventDelete,\n    RxStorageInstance,\n    CollectionsOfDatabase,\n    RxChangeEventBulk,\n    RxLocalDocumentData,\n    RxDocumentBase,\n    RxConflictHandler,\n    MaybePromise,\n    CRDTEntry,\n    MangoQuerySelectorAndIndex,\n    MigrationStrategies\n} from './types/index.d.ts';\n\nimport {\n    RxSchema\n} from './rx-schema.ts';\n\nimport {\n    createNewRxDocument,\n    getRxDocumentConstructor\n} from './rx-document-prototype-merge.ts';\nimport {\n    getWrappedStorageInstance,\n    getWrittenDocumentsFromBulkWriteResponse,\n    throwIfIsStorageWriteError,\n    WrappedRxStorageInstance\n} from './rx-storage-helper.ts';\nimport { IncrementalWriteQueue } from './incremental-write.ts';\nimport { beforeDocumentUpdateWrite } from './rx-document.ts';\nimport { overwritable } from './overwritable.ts';\nimport type { RxPipeline, RxPipelineOptions } from './plugins/pipeline/index.ts';\nimport { defaultConflictHandler } from './replication-protocol/default-conflict-handler.ts';\nimport { rxChangeEventBulkToRxChangeEvents } from './rx-change-event.ts';\n\nconst HOOKS_WHEN = ['pre', 'post'] as const;\ntype HookWhenType = typeof HOOKS_WHEN[number];\nconst HOOKS_KEYS = ['insert', 'save', 'remove', 'create'] as const;\ntype HookKeyType = typeof HOOKS_KEYS[number];\nlet hooksApplied = false;\n\nexport class RxCollectionBase<\n    InstanceCreationOptions,\n    RxDocumentType = { [prop: string]: any; },\n    OrmMethods = {},\n    StaticMethods = { [key: string]: any; },\n    Reactivity = any\n> {\n\n\n    /**\n     * Stores all 'normal' documents\n     */\n    public storageInstance: WrappedRxStorageInstance<RxDocumentType, any, InstanceCreationOptions> = {} as any;\n    public readonly timeouts: Set<ReturnType<typeof setTimeout>> = new Set();\n    public incrementalWriteQueue: IncrementalWriteQueue<RxDocumentType> = {} as any;\n\n\n    /**\n     * Before reads, all these methods are awaited. Used to \"block\" reads\n     * depending on other processes, like when the RxPipeline is running.\n     */\n    public readonly awaitBeforeReads = new Set<() => MaybePromise<any>>();\n\n    constructor(\n        public readonly database: RxDatabase<CollectionsOfDatabase, any, InstanceCreationOptions, Reactivity>,\n        public name: string,\n        public schema: RxSchema<RxDocumentType>,\n        public internalStorageInstance: RxStorageInstance<RxDocumentType, any, InstanceCreationOptions>,\n        public instanceCreationOptions: InstanceCreationOptions = {} as any,\n        public migrationStrategies: MigrationStrategies = {},\n        public methods: KeyFunctionMap = {},\n        public attachments: KeyFunctionMap = {},\n        public options: any = {},\n        public cacheReplacementPolicy: RxCacheReplacementPolicy = defaultCacheReplacementPolicy,\n        public statics: KeyFunctionMap = {},\n        public conflictHandler: RxConflictHandler<RxDocumentType> = defaultConflictHandler\n    ) {\n        _applyHookFunctions(this.asRxCollection);\n\n\n        if (database) { // might be falsy on pseudoInstance\n            this.eventBulks$ = database.eventBulks$.pipe(\n                filter(changeEventBulk => changeEventBulk.collectionName === this.name)\n            );\n        } else { }\n    }\n\n    get insert$(): Observable<RxChangeEventInsert<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'INSERT')\n        ) as any;\n    }\n    get update$(): Observable<RxChangeEventUpdate<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'UPDATE')\n        ) as any;\n    }\n    get remove$(): Observable<RxChangeEventDelete<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'DELETE')\n        ) as any;\n    }\n\n    public _incrementalUpsertQueues: Map<string, Promise<any>> = new Map();\n    // defaults\n    public synced: boolean = false;\n    public hooks: {\n        [key in HookKeyType]: {\n            [when in HookWhenType]: {\n                series: Function[];\n                parallel: Function[];\n            };\n        }\n    } = {} as any;\n    public _subs: Subscription[] = [];\n\n    public _docCache: DocumentCache<RxDocumentType, OrmMethods> = {} as any;\n\n    public _queryCache: QueryCache = createQueryCache();\n    public $: Observable<RxChangeEvent<RxDocumentType>> = {} as any;\n    public checkpoint$: Observable<any> = {} as any;\n    public _changeEventBuffer: ChangeEventBuffer<RxDocumentType> = {} as ChangeEventBuffer<RxDocumentType>;\n\n    /**\n     * Internally only use eventBulks$\n     * Do not use .$ or .observable$ because that has to transform\n     * the events which decreases performance.\n     */\n    public readonly eventBulks$: Observable<RxChangeEventBulk<any>> = {} as any;\n\n\n    /**\n     * When the collection is closed,\n     * these functions will be called an awaited.\n     * Used to automatically clean up stuff that\n     * belongs to this collection.\n    */\n    public onClose: (() => MaybePromise<any>)[] = [];\n    public closed = false;\n\n    public onRemove: (() => MaybePromise<any>)[] = [];\n\n    public async prepare(): Promise<void> {\n        this.storageInstance = getWrappedStorageInstance(\n            this.database,\n            this.internalStorageInstance,\n            this.schema.jsonSchema\n        );\n        this.incrementalWriteQueue = new IncrementalWriteQueue<RxDocumentType>(\n            this.storageInstance,\n            this.schema.primaryPath,\n            (newData, oldData) => beforeDocumentUpdateWrite(this as any, newData, oldData),\n            result => this._runHooks('post', 'save', result)\n        );\n\n        this.$ = this.eventBulks$.pipe(\n            mergeMap(changeEventBulk => rxChangeEventBulkToRxChangeEvents(changeEventBulk)),\n        );\n        this.checkpoint$ = this.eventBulks$.pipe(\n            map(changeEventBulk => changeEventBulk.checkpoint),\n        );\n\n        this._changeEventBuffer = createChangeEventBuffer<RxDocumentType>(this.asRxCollection);\n        let documentConstructor: any;\n        this._docCache = new DocumentCache(\n            this.schema.primaryPath,\n            this.eventBulks$.pipe(\n                filter(bulk => !bulk.isLocal),\n                map(bulk => bulk.events)\n            ),\n            docData => {\n                if (!documentConstructor) {\n                    documentConstructor = getRxDocumentConstructor(this.asRxCollection);\n                }\n                return createNewRxDocument(this.asRxCollection, documentConstructor, docData);\n            }\n        );\n\n\n        const listenToRemoveSub = this.database.internalStore.changeStream().pipe(\n            filter(bulk => {\n                const key = this.name + '-' + this.schema.version;\n                const found = bulk.events.find(event => {\n                    return (\n                        event.documentData.context === 'collection' &&\n                        event.documentData.key === key &&\n                        event.operation === 'DELETE'\n                    );\n                });\n                return !!found;\n            })\n        ).subscribe(async () => {\n            await this.close();\n            await Promise.all(this.onRemove.map(fn => fn()));\n        });\n        this._subs.push(listenToRemoveSub);\n\n\n        const databaseStorageToken = await this.database.storageToken;\n        const subDocs = this.storageInstance.changeStream().subscribe(eventBulk => {\n            const changeEventBulk: RxChangeEventBulk<RxDocumentType | RxLocalDocumentData> = {\n                id: eventBulk.id,\n                isLocal: false,\n                internal: false,\n                collectionName: this.name,\n                storageToken: databaseStorageToken,\n                events: eventBulk.events,\n                databaseToken: this.database.token,\n                checkpoint: eventBulk.checkpoint,\n                context: eventBulk.context\n            };\n            this.database.$emit(changeEventBulk);\n        });\n        this._subs.push(subDocs);\n\n        return PROMISE_RESOLVE_VOID;\n    }\n\n\n    /**\n     * Manually call the cleanup function of the storage.\n     * @link https://rxdb.info/cleanup.html\n     */\n    cleanup(_minimumDeletedTime?: number): Promise<boolean> {\n        ensureRxCollectionIsNotClosed(this);\n        throw pluginMissing('cleanup');\n    }\n\n    // overwritten by migration-plugin\n    migrationNeeded(): Promise<boolean> {\n        throw pluginMissing('migration-schema');\n    }\n    getMigrationState(): RxMigrationState {\n        throw pluginMissing('migration-schema');\n    }\n    startMigration(batchSize: number = 10): Promise<void> {\n        ensureRxCollectionIsNotClosed(this);\n        return this.getMigrationState().startMigration(batchSize);\n    }\n    migratePromise(batchSize: number = 10): Promise<any> {\n        return this.getMigrationState().migratePromise(batchSize);\n    }\n\n    async insert(\n        json: RxDocumentType | RxDocument\n    ): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        ensureRxCollectionIsNotClosed(this);\n        const writeResult = await this.bulkInsert([json as any]);\n\n        const isError = writeResult.error[0];\n        throwIfIsStorageWriteError(this as any, (json as any)[this.schema.primaryPath] as any, json, isError as any);\n        const insertResult = ensureNotFalsy(writeResult.success[0]);\n        return insertResult;\n    }\n\n    async bulkInsert(\n        docsData: RxDocumentType[]\n    ): Promise<{\n        success: RxDocument<RxDocumentType, OrmMethods>[];\n        error: RxStorageWriteError<RxDocumentType>[];\n    }> {\n        ensureRxCollectionIsNotClosed(this);\n        /**\n         * Optimization shortcut,\n         * do nothing when called with an empty array\n        */\n        if (docsData.length === 0) {\n            return {\n                success: [],\n                error: []\n            };\n        }\n\n        const primaryPath = this.schema.primaryPath;\n\n        const ids = new Set<string>();\n\n        /**\n         * This code is a bit redundant for better performance.\n         * Instead of iterating multiple times,\n         * we directly transform the input to a write-row array.\n         */\n        let insertRows: BulkWriteRow<RxDocumentType>[];\n        if (this.hasHooks('pre', 'insert')) {\n            insertRows = await Promise.all(\n                docsData.map(docData => {\n                    const useDocData = fillObjectDataBeforeInsert(this.schema, docData);\n                    return this._runHooks('pre', 'insert', useDocData)\n                        .then(() => {\n                            ids.add((useDocData as any)[primaryPath]);\n                            return { document: useDocData };\n                        });\n                })\n            );\n        } else {\n            insertRows = new Array(docsData.length);\n            const schema = this.schema;\n            for (let index = 0; index < docsData.length; index++) {\n                const docData = docsData[index];\n                const useDocData = fillObjectDataBeforeInsert(schema, docData);\n                ids.add((useDocData as any)[primaryPath]);\n                insertRows[index] = { document: useDocData };\n            }\n        }\n\n\n        if (ids.size !== docsData.length) {\n            throw newRxError('COL22', {\n                collection: this.name,\n                args: {\n                    documents: docsData\n                }\n            });\n        }\n\n        const results = await this.storageInstance.bulkWrite(\n            insertRows,\n            'rx-collection-bulk-insert'\n        );\n\n\n        /**\n         * Often the user does not need to access the RxDocuments of the bulkInsert() call.\n         * So we transform the data to RxDocuments only if needed to use less CPU performance.\n         */\n        let rxDocuments: RxDocument<RxDocumentType, OrmMethods>[];\n        const collection = this;\n        const ret = {\n            get success() {\n                if (!rxDocuments) {\n                    const success = getWrittenDocumentsFromBulkWriteResponse(\n                        collection.schema.primaryPath,\n                        insertRows,\n                        results\n                    );\n                    rxDocuments = mapDocumentsDataToCacheDocs<RxDocumentType, OrmMethods>(collection._docCache, success);\n                }\n                return rxDocuments;\n            },\n            error: results.error\n        };\n\n        if (this.hasHooks('post', 'insert')) {\n            const docsMap: Map<string, RxDocumentType> = new Map();\n            insertRows.forEach(row => {\n                const doc = row.document;\n                docsMap.set((doc as any)[primaryPath] as any, doc);\n            });\n            await Promise.all(\n                ret.success.map(doc => {\n                    return this._runHooks(\n                        'post',\n                        'insert',\n                        docsMap.get(doc.primary),\n                        doc\n                    );\n                })\n            );\n        }\n\n        return ret;\n    }\n\n    async bulkRemove(\n        /**\n         * You can either remove the documents by their ids\n         * or by directly providing the RxDocument instances\n         * if you have them already. This improves performance a bit.\n         */\n        idsOrDocs: string[] | RxDocument<RxDocumentType>[]\n    ): Promise<{\n        success: RxDocument<RxDocumentType, OrmMethods>[];\n        error: RxStorageWriteError<RxDocumentType>[];\n    }> {\n        ensureRxCollectionIsNotClosed(this);\n        const primaryPath = this.schema.primaryPath;\n        /**\n         * Optimization shortcut,\n         * do nothing when called with an empty array\n         */\n        if (idsOrDocs.length === 0) {\n            return {\n                success: [],\n                error: []\n            };\n        }\n\n        let rxDocumentMap: Map<string, RxDocument<RxDocumentType, OrmMethods>>;\n        if (typeof idsOrDocs[0] === 'string') {\n            rxDocumentMap = await this.findByIds(idsOrDocs as string[]).exec();\n        } else {\n            rxDocumentMap = new Map();\n            (idsOrDocs as RxDocument<RxDocumentType, OrmMethods>[]).forEach(d => rxDocumentMap.set(d.primary, d));\n        }\n\n        const docsData: RxDocumentData<RxDocumentType>[] = [];\n        const docsMap: Map<string, RxDocumentData<RxDocumentType>> = new Map();\n        Array.from(rxDocumentMap.values()).forEach(rxDocument => {\n            const data: RxDocumentData<RxDocumentType> = rxDocument.toMutableJSON(true) as any;\n            docsData.push(data);\n            docsMap.set(rxDocument.primary, data);\n        });\n\n        await Promise.all(\n            docsData.map(doc => {\n                const primary = (doc as any)[this.schema.primaryPath];\n                return this._runHooks('pre', 'remove', doc, rxDocumentMap.get(primary));\n            })\n        );\n        const removeDocs: BulkWriteRow<RxDocumentType>[] = docsData.map(doc => {\n            const writeDoc = flatClone(doc);\n            writeDoc._deleted = true;\n            return {\n                previous: doc,\n                document: writeDoc\n            };\n        });\n        const results = await this.storageInstance.bulkWrite(\n            removeDocs,\n            'rx-collection-bulk-remove'\n        );\n\n\n        const success = getWrittenDocumentsFromBulkWriteResponse(\n            this.schema.primaryPath,\n            removeDocs,\n            results\n        );\n\n        const deletedRxDocuments: RxDocument<RxDocumentType, OrmMethods>[] = [];\n        const successIds: string[] = success.map(d => {\n            const id = d[primaryPath] as string;\n            const doc = this._docCache.getCachedRxDocument(d);\n            deletedRxDocuments.push(doc);\n            return id;\n        });\n\n        // run hooks\n        await Promise.all(\n            successIds.map(id => {\n                return this._runHooks(\n                    'post',\n                    'remove',\n                    docsMap.get(id),\n                    rxDocumentMap.get(id)\n                );\n            })\n        );\n\n\n        return {\n            success: deletedRxDocuments,\n            error: results.error\n        };\n    }\n\n    /**\n     * same as bulkInsert but overwrites existing document with same primary\n     */\n    async bulkUpsert(docsData: Partial<RxDocumentType>[]): Promise<{\n        success: RxDocument<RxDocumentType, OrmMethods>[];\n        error: RxStorageWriteError<RxDocumentType>[];\n    }> {\n        ensureRxCollectionIsNotClosed(this);\n        const insertData: RxDocumentType[] = [];\n        const useJsonByDocId: Map<string, RxDocumentType> = new Map();\n        docsData.forEach(docData => {\n            const useJson = fillObjectDataBeforeInsert(this.schema, docData);\n            const primary: string = useJson[this.schema.primaryPath] as any;\n            if (!primary) {\n                throw newRxError('COL3', {\n                    primaryPath: this.schema.primaryPath as string,\n                    data: useJson,\n                    schema: this.schema.jsonSchema\n                });\n            }\n            useJsonByDocId.set(primary, useJson);\n            insertData.push(useJson);\n        });\n\n        const insertResult = await this.bulkInsert(insertData);\n        const success = insertResult.success.slice(0);\n        const error: RxStorageWriteError<RxDocumentType>[] = [];\n\n        // update the ones that existed already\n        await Promise.all(\n            insertResult.error.map(async (err) => {\n                if (err.status !== 409) {\n                    error.push(err);\n                } else {\n                    const id = err.documentId;\n                    const writeData = getFromMapOrThrow(useJsonByDocId, id);\n                    const docDataInDb = ensureNotFalsy(err.documentInDb);\n                    const doc = this._docCache.getCachedRxDocuments([docDataInDb])[0];\n                    const newDoc = await doc.incrementalModify(() => writeData);\n                    success.push(newDoc);\n                }\n            })\n        );\n        return {\n            error,\n            success\n        };\n    }\n\n    /**\n     * same as insert but overwrites existing document with same primary\n     */\n    async upsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        ensureRxCollectionIsNotClosed(this);\n        const bulkResult = await this.bulkUpsert([json]);\n        throwIfIsStorageWriteError<RxDocumentType>(\n            this.asRxCollection,\n            (json as any)[this.schema.primaryPath],\n            json as any,\n            bulkResult.error[0]\n        );\n        return bulkResult.success[0];\n    }\n\n    /**\n     * upserts to a RxDocument, uses incrementalModify if document already exists\n     */\n    incrementalUpsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        ensureRxCollectionIsNotClosed(this);\n        const useJson = fillObjectDataBeforeInsert(this.schema, json);\n        const primary: string = useJson[this.schema.primaryPath] as any;\n        if (!primary) {\n            throw newRxError('COL4', {\n                data: json\n            });\n        }\n\n        // ensure that it won't try 2 parallel runs\n        let queue = this._incrementalUpsertQueues.get(primary);\n        if (!queue) {\n            queue = PROMISE_RESOLVE_VOID;\n        }\n        queue = queue\n            .then(() => _incrementalUpsertEnsureRxDocumentExists(this as any, primary as any, useJson))\n            .then((wasInserted) => {\n                if (!wasInserted.inserted) {\n                    return _incrementalUpsertUpdate(wasInserted.doc, useJson);\n                } else {\n                    return wasInserted.doc;\n                }\n            });\n        this._incrementalUpsertQueues.set(primary, queue);\n        return queue;\n    }\n\n    find(queryObj?: MangoQuery<RxDocumentType>): RxQuery<\n        RxDocumentType,\n        RxDocument<RxDocumentType, OrmMethods>[],\n        OrmMethods,\n        Reactivity\n    > {\n        ensureRxCollectionIsNotClosed(this);\n\n        runPluginHooks('prePrepareRxQuery', {\n            op: 'find',\n            queryObj,\n            collection: this\n        });\n\n        if (!queryObj) {\n            queryObj = _getDefaultQuery();\n        }\n\n        const query = createRxQuery('find', queryObj, this as any);\n        return query as any;\n    }\n\n    findOne(\n        queryObj?: MangoQueryNoLimit<RxDocumentType> | string\n    ): RxQuery<\n        RxDocumentType,\n        RxDocument<RxDocumentType, OrmMethods> | null,\n        OrmMethods,\n        Reactivity\n    > {\n        ensureRxCollectionIsNotClosed(this);\n\n        runPluginHooks('prePrepareRxQuery', {\n            op: 'findOne',\n            queryObj,\n            collection: this\n        });\n\n        let query;\n\n        if (typeof queryObj === 'string') {\n            query = createRxQuery('findOne', {\n                selector: {\n                    [this.schema.primaryPath]: queryObj\n                },\n                limit: 1\n            }, this as any);\n        } else {\n            if (!queryObj) {\n                queryObj = _getDefaultQuery();\n            }\n\n            // cannot have limit on findOne queries because it will be overwritten\n            if ((queryObj as MangoQuery).limit) {\n                throw newRxError('QU6');\n            }\n\n            queryObj = flatClone(queryObj);\n            (queryObj as any).limit = 1;\n            query = createRxQuery<RxDocumentType>('findOne', queryObj, this as any);\n        }\n\n\n        return query as any;\n    }\n\n    count(queryObj?: MangoQuerySelectorAndIndex<RxDocumentType>): RxQuery<\n        RxDocumentType,\n        number,\n        OrmMethods,\n        Reactivity\n    > {\n        ensureRxCollectionIsNotClosed(this);\n        if (!queryObj) {\n            queryObj = _getDefaultQuery();\n        }\n        const query = createRxQuery('count', queryObj, this as any);\n        return query as any;\n    }\n\n    /**\n     * find a list documents by their primary key\n     * has way better performance then running multiple findOne() or a find() with a complex $or-selected\n     */\n    findByIds(\n        ids: string[]\n    ): RxQuery<\n        RxDocumentType,\n        Map<string, RxDocument<RxDocumentType, OrmMethods>>,\n        OrmMethods,\n        Reactivity\n    > {\n        ensureRxCollectionIsNotClosed(this);\n        const mangoQuery: MangoQuery<RxDocumentType> = {\n            selector: {\n                [this.schema.primaryPath]: {\n                    $in: ids.slice(0)\n                }\n            } as any\n        };\n        const query = createRxQuery('findByIds', mangoQuery, this as any);\n        return query as any;\n    }\n\n    /**\n     * Export collection to a JSON friendly format.\n     */\n    exportJSON(): Promise<RxDumpCollection<RxDocumentType>>;\n    exportJSON(): Promise<RxDumpCollectionAny<RxDocumentType>>;\n    exportJSON(): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<collection>.exportJSON()` method.\n     */\n    importJSON(_exportedJSON: RxDumpCollectionAny<RxDocumentType>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    insertCRDT(_updateObj: CRDTEntry<any> | CRDTEntry<any>[]): RxDocument<RxDocumentType, OrmMethods> {\n        throw pluginMissing('crdt');\n    }\n\n\n    addPipeline(_options: RxPipelineOptions<RxDocumentType>): Promise<RxPipeline<RxDocumentType>> {\n        throw pluginMissing('pipeline');\n    }\n\n    /**\n     * HOOKS\n     */\n    addHook(when: HookWhenType, key: HookKeyType, fun: any, parallel = false) {\n        if (typeof fun !== 'function') {\n            throw newRxTypeError('COL7', {\n                key,\n                when\n            });\n        }\n\n        if (!HOOKS_WHEN.includes(when)) {\n            throw newRxTypeError('COL8', {\n                key,\n                when\n            });\n        }\n\n        if (!HOOKS_KEYS.includes(key)) {\n            throw newRxError('COL9', {\n                key\n            });\n        }\n\n        if (when === 'post' && key === 'create' && parallel === true) {\n            throw newRxError('COL10', {\n                when,\n                key,\n                parallel\n            });\n        }\n\n        // bind this-scope to hook-function\n        const boundFun = fun.bind(this);\n\n        const runName = parallel ? 'parallel' : 'series';\n\n        this.hooks[key] = this.hooks[key] || {};\n        this.hooks[key][when] = this.hooks[key][when] || {\n            series: [],\n            parallel: []\n        };\n        this.hooks[key][when][runName].push(boundFun);\n    }\n\n    getHooks(when: HookWhenType, key: HookKeyType) {\n        if (\n            !this.hooks[key] ||\n            !this.hooks[key][when]\n        ) {\n            return {\n                series: [],\n                parallel: []\n            };\n        }\n        return this.hooks[key][when];\n    }\n\n    hasHooks(when: HookWhenType, key: HookKeyType) {\n        /**\n         * Performance shortcut\n         * so that we not have to build the empty object.\n         */\n        if (\n            !this.hooks[key] ||\n            !this.hooks[key][when]\n        ) {\n            return false;\n        }\n\n        const hooks = this.getHooks(when, key);\n        if (!hooks) {\n            return false;\n        }\n        return hooks.series.length > 0 || hooks.parallel.length > 0;\n    }\n\n    _runHooks(when: HookWhenType, key: HookKeyType, data: any, instance?: any): Promise<any> {\n        const hooks = this.getHooks(when, key);\n\n        if (!hooks) {\n            return PROMISE_RESOLVE_VOID;\n        }\n\n        // run parallel: false\n        const tasks = hooks.series.map((hook: any) => () => hook(data, instance));\n        return promiseSeries(tasks)\n            // run parallel: true\n            .then(() => Promise.all(\n                hooks.parallel\n                    .map((hook: any) => hook(data, instance))\n            ));\n    }\n\n    /**\n     * does the same as ._runHooks() but with non-async-functions\n     */\n    _runHooksSync(when: HookWhenType, key: HookKeyType, data: any, instance: any) {\n        if (!this.hasHooks(when, key)) {\n            return;\n        }\n        const hooks = this.getHooks(when, key);\n        if (!hooks) return;\n        hooks.series.forEach((hook: any) => hook(data, instance));\n    }\n\n    /**\n     * Returns a promise that resolves after the given time.\n     * Ensures that is properly cleans up when the collection is closed\n     * so that no running timeouts prevent the exit of the JavaScript process.\n     */\n    promiseWait(time: number): Promise<void> {\n        const ret = new Promise<void>(res => {\n            const timeout = setTimeout(() => {\n                this.timeouts.delete(timeout);\n                res();\n            }, time);\n            this.timeouts.add(timeout);\n        });\n        return ret;\n    }\n\n    async close(): Promise<boolean> {\n        if (this.closed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n\n        await Promise.all(this.onClose.map(fn => fn()));\n\n        /**\n         * Settings closed = true\n         * must be the first thing to do,\n         * so for example the replication can directly stop\n         * instead of sending requests to a closed storage.\n         */\n        this.closed = true;\n\n\n        Array.from(this.timeouts).forEach(timeout => clearTimeout(timeout));\n        if (this._changeEventBuffer) {\n            this._changeEventBuffer.close();\n        }\n        /**\n         * First wait until the whole database is idle.\n         * This ensures that the storage does not get closed\n         * while some operation is running.\n         * It is important that we do not intercept a running call\n         * because it might lead to undefined behavior like when a doc is written\n         * but the change is not added to the changes collection.\n         */\n        return this.database.requestIdlePromise()\n            .then(() => this.storageInstance.close())\n            .then(() => {\n                /**\n                 * Unsubscribing must be done AFTER the storageInstance.close()\n                 * Because the conflict handling is part of the subscriptions and\n                 * otherwise there might be open conflicts to be resolved which\n                 * will then stuck and never resolve.\n                 */\n                this._subs.forEach(sub => sub.unsubscribe());\n\n                delete this.database.collections[this.name];\n                return runAsyncPluginHooks('postCloseRxCollection', this).then(() => true);\n            });\n    }\n\n    /**\n     * remove all data of the collection\n     */\n    async remove(): Promise<any> {\n        await this.close();\n        await Promise.all(this.onRemove.map(fn => fn()));\n        /**\n         * TODO here we should pass the already existing\n         * storage instances instead of creating new ones.\n         */\n        await removeCollectionStorages(\n            this.database.storage,\n            this.database.internalStore,\n            this.database.token,\n            this.database.name,\n            this.name,\n            this.database.password,\n            this.database.hashFunction\n        );\n    }\n\n    get asRxCollection(): RxCollection<RxDocumentType, OrmMethods, StaticMethods, any, Reactivity> {\n        return this as any;\n    }\n}\n\n/**\n * adds the hook-functions to the collections prototype\n * this runs only once\n */\nfunction _applyHookFunctions(\n    collection: RxCollection<any, any>\n) {\n    if (hooksApplied) return; // already run\n    hooksApplied = true;\n    const colProto = Object.getPrototypeOf(collection);\n    HOOKS_KEYS.forEach(key => {\n        HOOKS_WHEN.map(when => {\n            const fnName = when + ucfirst(key);\n            colProto[fnName] = function (fun: string, parallel: boolean) {\n                return this.addHook(when, key, fun, parallel);\n            };\n        });\n    });\n}\n\nfunction _incrementalUpsertUpdate<RxDocType>(\n    doc: RxDocumentBase<RxDocType>,\n    json: RxDocumentData<RxDocType>\n): Promise<RxDocumentBase<RxDocType>> {\n    return doc.incrementalModify((_innerDoc) => {\n        return json;\n    });\n}\n\n/**\n * ensures that the given document exists\n * @return promise that resolves with new doc and flag if inserted\n */\nfunction _incrementalUpsertEnsureRxDocumentExists<RxDocType>(\n    rxCollection: RxCollection<RxDocType>,\n    primary: string,\n    json: any\n): Promise<\n    {\n        doc: RxDocument<RxDocType>;\n        inserted: boolean;\n    }\n> {\n    /**\n     * Optimisation shortcut,\n     * first try to find the document in the doc-cache\n     */\n    const docDataFromCache = rxCollection._docCache.getLatestDocumentDataIfExists(primary);\n    if (docDataFromCache) {\n        return Promise.resolve({\n            doc: rxCollection._docCache.getCachedRxDocuments([docDataFromCache])[0],\n            inserted: false\n        });\n    }\n    return rxCollection.findOne(primary).exec()\n        .then(doc => {\n            if (!doc) {\n                return rxCollection.insert(json).then(newDoc => ({\n                    doc: newDoc,\n                    inserted: true\n                }));\n            } else {\n                return {\n                    doc,\n                    inserted: false\n                };\n            }\n        });\n}\n\n/**\n * creates and prepares a new collection\n */\nexport function createRxCollection(\n    {\n        database,\n        name,\n        schema,\n        instanceCreationOptions = {},\n        migrationStrategies = {},\n        autoMigrate = true,\n        statics = {},\n        methods = {},\n        attachments = {},\n        options = {},\n        localDocuments = false,\n        cacheReplacementPolicy = defaultCacheReplacementPolicy,\n        conflictHandler = defaultConflictHandler\n    }: any\n): Promise<RxCollection> {\n    const storageInstanceCreationParams: RxStorageInstanceCreationParams<any, any> = {\n        databaseInstanceToken: database.token,\n        databaseName: database.name,\n        collectionName: name,\n        schema: schema.jsonSchema,\n        options: instanceCreationOptions,\n        multiInstance: database.multiInstance,\n        password: database.password,\n        devMode: overwritable.isDevMode()\n    };\n\n    runPluginHooks(\n        'preCreateRxStorageInstance',\n        storageInstanceCreationParams\n    );\n\n    return createRxCollectionStorageInstance(\n        database,\n        storageInstanceCreationParams\n    ).then(storageInstance => {\n        const collection = new RxCollectionBase(\n            database,\n            name,\n            schema,\n            storageInstance,\n            instanceCreationOptions,\n            migrationStrategies,\n            methods,\n            attachments,\n            options,\n            cacheReplacementPolicy,\n            statics,\n            conflictHandler\n        );\n\n        return collection\n            .prepare()\n            .then(() => {\n                // ORM add statics\n                Object\n                    .entries(statics)\n                    .forEach(([funName, fun]) => {\n                        Object.defineProperty(collection, funName, {\n                            get: () => (fun as any).bind(collection)\n                        });\n                    });\n\n                let ret = PROMISE_RESOLVE_VOID;\n                if (autoMigrate && collection.schema.version !== 0) {\n                    ret = collection.migratePromise();\n                }\n                return ret;\n            })\n            .then(() => {\n                runPluginHooks('createRxCollection', {\n                    collection,\n                    creator: {\n                        name,\n                        schema,\n                        storageInstance,\n                        instanceCreationOptions,\n                        migrationStrategies,\n                        methods,\n                        attachments,\n                        options,\n                        cacheReplacementPolicy,\n                        localDocuments,\n                        statics\n                    }\n                });\n                return collection as any;\n            })\n            /**\n             * If the collection creation fails,\n             * we yet have to close the storage instances.\n             */\n            .catch(err => {\n                return storageInstance.close()\n                    .then(() => Promise.reject(err as Error));\n            });\n    });\n}\n\nexport function isRxCollection(obj: any): boolean {\n    return obj instanceof RxCollectionBase;\n}\n"],"mappings":"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","ignoreList":[]}