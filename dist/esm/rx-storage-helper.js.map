{"version":3,"file":"rx-storage-helper.js","names":["overwritable","newRxError","fillPrimaryKey","getPrimaryFieldOfPrimaryKey","PROMISE_RESOLVE_TRUE","appendToArray","createRevision","ensureNotFalsy","flatClone","getDefaultRevision","getDefaultRxDocumentMeta","now","promiseWait","randomCouchString","filter","map","startWith","switchMap","INTERNAL_STORAGE_NAME","RX_DATABASE_LOCAL_DOCS_STORAGE_NAME","getSingleDocument","storageInstance","documentId","results","findDocumentsById","doc","undefined","writeSingle","instance","writeRow","context","writeResult","bulkWrite","error","length","ret","success","observeSingle","firstFindPromise","changeStream","pipe","evBulk","events","find","ev","Promise","resolve","documentData","v","stackCheckpoints","checkpoints","Object","assign","storageChangeEventToRxChangeEvent","isLocal","rxStorageChangeEvent","rxCollection","previousDocumentData","collectionName","name","operation","deepFreezeWhenDevMode","throwIfIsStorageWriteError","collection","writeData","status","id","writeError","data","categorizeBulkWriteRows","primaryPath","docsInDb","bulkWriteRows","onInsert","onUpdate","hasAttachments","schema","attachments","bulkInsertDocs","bulkUpdateDocs","errors","eventBulkId","eventBulk","checkpoint","startTime","endTime","eventBulkEvents","attachmentsAdd","attachmentsRemove","attachmentsUpdate","hasDocsInDb","size","newestRow","rowAmount","_loop","rowId","document","previous","docId","documentDeleted","_deleted","previousDeleted","documentInDb","get","attachmentError","insertedIsDeleted","entries","_attachments","forEach","attachmentId","attachmentData","isError","push","digest","stripAttachmentsDataFromRow","event","stripAttachmentsDataFromDocument","revInDb","_rev","err","updatedRow","keys","previousAttachmentData","newDigest","eventDocumentData","previousEventDocumentData","args","getAttachmentSize","attachmentBase64String","atob","attachmentWriteDataToNormalData","type","useDoc","flatCloneDocWithMeta","_meta","getWrappedStorageInstance","database","rxJsonSchema","primaryKey","transformDocumentDataFromRxDBToRxStorage","isDevMode","structuredClone","metaFieldName","hasOwnProperty","dataBefore","dataAfter","lwt","token","originalStorageInstance","internals","databaseName","options","rows","toStorageWriteRows","row","lockedRun","then","useWriteResult","slice","reInsertErrors","reInserts","subResult","query","preparedQuery","count","info","ids","deleted","getAttachmentData","getChangedDocumentsSince","limit","cleanup","minDeletedTime","remove","storageInstances","delete","close","conflictResultionTasks","resolveConflictResultionTask","taskSolution","output","isEqual","add","ensureRxStorageInstanceParamsAreCorrect","params","keyCompression","hasEncryption","compression","jsonSchema","encrypted","randomDelayStorage","input","retStorage","storage","statics","createStorageInstance","delayTimeBefore","delayTimeAfter","writeQueue","a","b","response","c"],"sources":["../../src/rx-storage-helper.ts"],"sourcesContent":["/**\n * Helper functions for accessing the RxStorage instances.\n */\n\nimport { overwritable } from './overwritable.ts';\nimport { newRxError } from './rx-error.ts';\nimport {\n    fillPrimaryKey,\n    getPrimaryFieldOfPrimaryKey\n} from './rx-schema-helper.ts';\nimport type {\n    BulkWriteRow,\n    BulkWriteRowProcessed,\n    CategorizeBulkWriteRowsOutput,\n    EventBulk,\n    RxAttachmentData,\n    RxAttachmentWriteData,\n    RxChangeEvent,\n    RxCollection,\n    RxDatabase,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorageWriteError,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    StringKeys,\n    RxStorageWriteErrorConflict,\n    RxStorageWriteErrorAttachment,\n    RxStorage\n} from './types/index.d.ts';\nimport {\n    PROMISE_RESOLVE_TRUE,\n    appendToArray,\n    createRevision,\n    ensureNotFalsy,\n    flatClone,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    now,\n    promiseWait,\n    randomCouchString\n} from './plugins/utils/index.ts';\nimport { Observable, filter, map, startWith, switchMap } from 'rxjs';\n\nexport const INTERNAL_STORAGE_NAME = '_rxdb_internal';\nexport const RX_DATABASE_LOCAL_DOCS_STORAGE_NAME = 'rxdatabase_storage_local';\n\nexport async function getSingleDocument<RxDocType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any>,\n    documentId: string\n): Promise<RxDocumentData<RxDocType> | undefined> {\n    const results = await storageInstance.findDocumentsById([documentId], false);\n    const doc = results[0];\n    if (doc) {\n        return doc;\n    } else {\n        return undefined;\n    }\n}\n\n/**\n * Writes a single document,\n * throws RxStorageBulkWriteError on failure\n */\nexport async function writeSingle<RxDocType>(\n    instance: RxStorageInstance<RxDocType, any, any>,\n    writeRow: BulkWriteRow<RxDocType>,\n    context: string\n): Promise<RxDocumentData<RxDocType>> {\n    const writeResult = await instance.bulkWrite(\n        [writeRow],\n        context\n    );\n    if (writeResult.error.length > 0) {\n        const error = writeResult.error[0];\n        throw error;\n    } else {\n        const ret = writeResult.success[0];\n        return ret;\n    }\n}\n\n/**\n * Observe the plain document data of a single document.\n * Do not forget to unsubscribe.\n */\nexport function observeSingle<RxDocType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any>,\n    documentId: string\n): Observable<RxDocumentData<RxDocType>> {\n    const firstFindPromise = getSingleDocument(storageInstance, documentId);\n    const ret = storageInstance\n        .changeStream()\n        .pipe(\n            map(evBulk => evBulk.events.find(ev => ev.documentId === documentId)),\n            filter(ev => !!ev),\n            map(ev => Promise.resolve(ensureNotFalsy(ev).documentData)),\n            startWith(firstFindPromise),\n            switchMap(v => v),\n            filter(v => !!v)\n        ) as any;\n    return ret;\n}\n\n\n/**\n * Checkpoints must be stackable over another.\n * This is required form some RxStorage implementations\n * like the sharding plugin, where a checkpoint only represents\n * the document state from some, but not all shards.\n */\nexport function stackCheckpoints<CheckpointType>(\n    checkpoints: CheckpointType[]\n): CheckpointType {\n    return Object.assign(\n        {},\n        ...checkpoints\n    );\n}\n\nexport function storageChangeEventToRxChangeEvent<DocType>(\n    isLocal: boolean,\n    rxStorageChangeEvent: RxStorageChangeEvent<DocType>,\n    rxCollection?: RxCollection,\n): RxChangeEvent<DocType> {\n    const documentData = rxStorageChangeEvent.documentData;\n    const previousDocumentData = rxStorageChangeEvent.previousDocumentData;\n    const ret: RxChangeEvent<DocType> = {\n        documentId: rxStorageChangeEvent.documentId,\n        collectionName: rxCollection ? rxCollection.name : undefined,\n        isLocal,\n        operation: rxStorageChangeEvent.operation,\n        documentData: overwritable.deepFreezeWhenDevMode(documentData as any),\n        previousDocumentData: overwritable.deepFreezeWhenDevMode(previousDocumentData as any)\n    };\n    return ret;\n}\n\nexport function throwIfIsStorageWriteError<RxDocType>(\n    collection: RxCollection<RxDocType, any, any>,\n    documentId: string,\n    writeData: RxDocumentWriteData<RxDocType> | RxDocType,\n    error: RxStorageWriteError<RxDocType> | undefined\n) {\n    if (error) {\n        if (error.status === 409) {\n            throw newRxError('CONFLICT', {\n                collection: collection.name,\n                id: documentId,\n                writeError: error,\n                data: writeData\n            });\n        } else if (error.status === 422) {\n            throw newRxError('VD2', {\n                collection: collection.name,\n                id: documentId,\n                writeError: error,\n                data: writeData\n            });\n        } else {\n            throw error;\n        }\n    }\n}\n\n\n/**\n * Analyzes a list of BulkWriteRows and determines\n * which documents must be inserted, updated or deleted\n * and which events must be emitted and which documents cause a conflict\n * and must not be written.\n * Used as helper inside of some RxStorage implementations.\n * @hotPath The performance of this function is critical\n */\nexport function categorizeBulkWriteRows<RxDocType>(\n    storageInstance: RxStorageInstance<any, any, any>,\n    primaryPath: StringKeys<RxDocType>,\n    /**\n     * Current state of the documents\n     * inside of the storage. Used to determine\n     * which writes cause conflicts.\n     * This must be a Map for better performance.\n     */\n    docsInDb: Map<RxDocumentData<RxDocType>[StringKeys<RxDocType>] | string, RxDocumentData<RxDocType>>,\n    /**\n     * The write rows that are passed to\n     * RxStorageInstance().bulkWrite().\n     */\n    bulkWriteRows: BulkWriteRow<RxDocType>[],\n    context: string,\n    /**\n     * Used by some storages for better performance.\n     * For example when get-by-id and insert/update can run in parallel.\n     */\n    onInsert?: (docData: RxDocumentData<RxDocType>) => void,\n    onUpdate?: (docData: RxDocumentData<RxDocType>) => void\n): CategorizeBulkWriteRowsOutput<RxDocType> {\n    const hasAttachments = !!storageInstance.schema.attachments;\n    const bulkInsertDocs: BulkWriteRowProcessed<RxDocType>[] = [];\n    const bulkUpdateDocs: BulkWriteRowProcessed<RxDocType>[] = [];\n    const errors: RxStorageWriteError<RxDocType>[] = [];\n    const eventBulkId = randomCouchString(10);\n    const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any> = {\n        id: eventBulkId,\n        events: [],\n        checkpoint: null,\n        context,\n        startTime: now(),\n        endTime: 0\n    };\n    const eventBulkEvents = eventBulk.events;\n\n    const attachmentsAdd: {\n        documentId: string;\n        attachmentId: string;\n        attachmentData: RxAttachmentWriteData;\n        digest: string;\n    }[] = [];\n    const attachmentsRemove: {\n        documentId: string;\n        attachmentId: string;\n        digest: string;\n    }[] = [];\n    const attachmentsUpdate: {\n        documentId: string;\n        attachmentId: string;\n        attachmentData: RxAttachmentWriteData;\n        digest: string;\n    }[] = [];\n\n    const hasDocsInDb = docsInDb.size > 0;\n    let newestRow: BulkWriteRowProcessed<RxDocType> | undefined;\n\n    /**\n     * @performance is really important in this loop!\n     */\n    const rowAmount = bulkWriteRows.length;\n    for (let rowId = 0; rowId < rowAmount; rowId++) {\n        const writeRow = bulkWriteRows[rowId];\n\n        // use these variables to have less property accesses\n        const document = writeRow.document;\n        const previous = writeRow.previous;\n        const docId = document[primaryPath] as string;\n        const documentDeleted = document._deleted;\n        const previousDeleted = previous && previous._deleted;\n\n        let documentInDb: RxDocumentData<RxDocType> | undefined = undefined as any;\n        if (hasDocsInDb) {\n            documentInDb = docsInDb.get(docId);\n        }\n        let attachmentError: RxStorageWriteErrorAttachment<RxDocType> | undefined;\n\n        if (!documentInDb) {\n            /**\n             * It is possible to insert already deleted documents,\n             * this can happen on replication.\n             */\n            const insertedIsDeleted = documentDeleted ? true : false;\n            if (hasAttachments) {\n                Object\n                    .entries(document._attachments)\n                    .forEach(([attachmentId, attachmentData]) => {\n                        if (\n                            !(attachmentData as RxAttachmentWriteData).data\n                        ) {\n                            attachmentError = {\n                                documentId: docId,\n                                isError: true,\n                                status: 510,\n                                writeRow,\n                                attachmentId\n                            };\n                            errors.push(attachmentError);\n                        } else {\n                            attachmentsAdd.push({\n                                documentId: docId,\n                                attachmentId,\n                                attachmentData: attachmentData as any,\n                                digest: attachmentData.digest\n                            });\n                        }\n                    });\n            }\n            if (!attachmentError) {\n                if (hasAttachments) {\n                    bulkInsertDocs.push(stripAttachmentsDataFromRow(writeRow));\n                    if (onInsert) {\n                        onInsert(document);\n                    }\n                } else {\n                    bulkInsertDocs.push(writeRow as any);\n                    if (onInsert) {\n                        onInsert(document);\n                    }\n                }\n\n                newestRow = writeRow as any;\n            }\n\n            if (!insertedIsDeleted) {\n                const event = {\n                    documentId: docId,\n                    operation: 'INSERT' as const,\n                    documentData: hasAttachments ? stripAttachmentsDataFromDocument(document) : document as any,\n                    previousDocumentData: hasAttachments && previous ? stripAttachmentsDataFromDocument(previous) : previous as any\n                };\n                eventBulkEvents.push(event);\n            }\n        } else {\n            // update existing document\n            const revInDb: string = documentInDb._rev;\n\n            /**\n             * Check for conflict\n             */\n            if (\n                (\n                    !previous\n                ) ||\n                (\n                    !!previous &&\n                    revInDb !== previous._rev\n                )\n            ) {\n                // is conflict error\n                const err: RxStorageWriteError<RxDocType> = {\n                    isError: true,\n                    status: 409,\n                    documentId: docId,\n                    writeRow: writeRow,\n                    documentInDb\n                };\n                errors.push(err);\n                continue;\n            }\n\n            // handle attachments data\n\n            const updatedRow: BulkWriteRowProcessed<RxDocType> = hasAttachments ? stripAttachmentsDataFromRow(writeRow) : writeRow as any;\n            if (hasAttachments) {\n                if (documentDeleted) {\n                    /**\n                     * Deleted documents must have cleared all their attachments.\n                     */\n                    if (previous) {\n                        Object\n                            .keys(previous._attachments)\n                            .forEach(attachmentId => {\n                                attachmentsRemove.push({\n                                    documentId: docId,\n                                    attachmentId,\n                                    digest: ensureNotFalsy(previous)._attachments[attachmentId].digest\n                                });\n                            });\n                    }\n                } else {\n                    // first check for errors\n                    Object\n                        .entries(document._attachments)\n                        .find(([attachmentId, attachmentData]) => {\n                            const previousAttachmentData = previous ? previous._attachments[attachmentId] : undefined;\n                            if (\n                                !previousAttachmentData &&\n                                !(attachmentData as RxAttachmentWriteData).data\n                            ) {\n                                attachmentError = {\n                                    documentId: docId,\n                                    documentInDb: documentInDb as any,\n                                    isError: true,\n                                    status: 510,\n                                    writeRow,\n                                    attachmentId\n                                };\n                            }\n                            return true;\n                        });\n                    if (!attachmentError) {\n                        Object\n                            .entries(document._attachments)\n                            .forEach(([attachmentId, attachmentData]) => {\n                                const previousAttachmentData = previous ? previous._attachments[attachmentId] : undefined;\n                                if (!previousAttachmentData) {\n                                    attachmentsAdd.push({\n                                        documentId: docId,\n                                        attachmentId,\n                                        attachmentData: attachmentData as any,\n                                        digest: attachmentData.digest\n                                    });\n                                } else {\n                                    const newDigest = updatedRow.document._attachments[attachmentId].digest;\n                                    if (\n                                        (attachmentData as RxAttachmentWriteData).data &&\n                                        /**\n                                         * Performance shortcut,\n                                         * do not update the attachment data if it did not change.\n                                         */\n                                        previousAttachmentData.digest !== newDigest\n                                    ) {\n                                        attachmentsUpdate.push({\n                                            documentId: docId,\n                                            attachmentId,\n                                            attachmentData: attachmentData as RxAttachmentWriteData,\n                                            digest: attachmentData.digest\n                                        });\n                                    }\n                                }\n                            });\n                    }\n                }\n            }\n\n            if (attachmentError) {\n                errors.push(attachmentError);\n            } else {\n                if (hasAttachments) {\n                    bulkUpdateDocs.push(stripAttachmentsDataFromRow(updatedRow));\n                    if (onUpdate) {\n                        onUpdate(document);\n                    }\n                } else {\n                    bulkUpdateDocs.push(updatedRow);\n                    if (onUpdate) {\n                        onUpdate(document);\n                    }\n                }\n                newestRow = updatedRow as any;\n            }\n\n            let eventDocumentData: RxDocumentData<RxDocType> | undefined = null as any;\n            let previousEventDocumentData: RxDocumentData<RxDocType> | undefined = null as any;\n            let operation: 'INSERT' | 'UPDATE' | 'DELETE' = null as any;\n\n            if (previousDeleted && !documentDeleted) {\n                operation = 'INSERT';\n                eventDocumentData = hasAttachments ? stripAttachmentsDataFromDocument(document) : document as any;\n            } else if (previous && !previousDeleted && !documentDeleted) {\n                operation = 'UPDATE';\n                eventDocumentData = hasAttachments ? stripAttachmentsDataFromDocument(document) : document as any;\n                previousEventDocumentData = previous;\n            } else if (documentDeleted) {\n                operation = 'DELETE';\n                eventDocumentData = ensureNotFalsy(document) as any;\n                previousEventDocumentData = previous;\n            } else {\n                throw newRxError('SNH', { args: { writeRow } });\n            }\n\n            const event = {\n                documentId: docId,\n                documentData: eventDocumentData as RxDocumentData<RxDocType>,\n                previousDocumentData: previousEventDocumentData,\n                operation: operation\n            };\n            eventBulkEvents.push(event);\n        }\n    }\n\n    return {\n        bulkInsertDocs,\n        bulkUpdateDocs,\n        newestRow,\n        errors,\n        eventBulk,\n        attachmentsAdd,\n        attachmentsRemove,\n        attachmentsUpdate\n    };\n}\n\nexport function stripAttachmentsDataFromRow<RxDocType>(writeRow: BulkWriteRow<RxDocType>): BulkWriteRowProcessed<RxDocType> {\n    return {\n        previous: writeRow.previous,\n        document: stripAttachmentsDataFromDocument(writeRow.document)\n    };\n}\n\nexport function getAttachmentSize(\n    attachmentBase64String: string\n): number {\n    return atob(attachmentBase64String).length;\n}\n\n/**\n * Used in custom RxStorage implementations.\n */\nexport function attachmentWriteDataToNormalData(writeData: RxAttachmentData | RxAttachmentWriteData): RxAttachmentData {\n    const data = (writeData as RxAttachmentWriteData).data;\n    if (!data) {\n        return writeData as any;\n    }\n    const ret: RxAttachmentData = {\n        length: getAttachmentSize(data),\n        digest: writeData.digest,\n        type: writeData.type\n    };\n    return ret;\n}\n\nexport function stripAttachmentsDataFromDocument<RxDocType>(doc: RxDocumentWriteData<RxDocType>): RxDocumentData<RxDocType> {\n\n    if (!doc._attachments || Object.keys(doc._attachments).length === 0) {\n        return doc;\n    }\n\n    const useDoc: RxDocumentData<RxDocType> = flatClone(doc) as any;\n    useDoc._attachments = {};\n    Object\n        .entries(doc._attachments)\n        .forEach(([attachmentId, attachmentData]) => {\n            useDoc._attachments[attachmentId] = attachmentWriteDataToNormalData(attachmentData);\n        });\n    return useDoc;\n}\n\n/**\n * Flat clone the document data\n * and also the _meta field.\n * Used many times when we want to change the meta\n * during replication etc.\n */\nexport function flatCloneDocWithMeta<RxDocType>(\n    doc: RxDocumentData<RxDocType>\n): RxDocumentData<RxDocType> {\n    const ret = flatClone(doc);\n    ret._meta = flatClone(doc._meta);\n    return ret;\n}\n\nexport type WrappedRxStorageInstance<RxDocumentType, Internals, InstanceCreationOptions> = RxStorageInstance<RxDocumentType, any, InstanceCreationOptions> & {\n    originalStorageInstance: RxStorageInstance<RxDocumentType, Internals, InstanceCreationOptions>;\n};\n\n/**\n * Wraps the normal storageInstance of a RxCollection\n * to ensure that all access is properly using the hooks\n * and other data transformations and also ensure that database.lockedRun()\n * is used properly.\n */\nexport function getWrappedStorageInstance<\n    RxDocType,\n    Internals,\n    InstanceCreationOptions,\n    CheckpointType\n>(\n    database: RxDatabase<{}, Internals, InstanceCreationOptions>,\n    storageInstance: RxStorageInstance<RxDocType, Internals, InstanceCreationOptions, CheckpointType>,\n    /**\n     * The original RxJsonSchema\n     * before it was mutated by hooks.\n     */\n    rxJsonSchema: RxJsonSchema<RxDocumentData<RxDocType>>\n): WrappedRxStorageInstance<RxDocType, Internals, InstanceCreationOptions> {\n    overwritable.deepFreezeWhenDevMode(rxJsonSchema);\n    const primaryPath = getPrimaryFieldOfPrimaryKey(rxJsonSchema.primaryKey);\n\n    function transformDocumentDataFromRxDBToRxStorage(\n        writeRow: BulkWriteRow<RxDocType>\n    ) {\n        let data = flatClone(writeRow.document);\n        data._meta = flatClone(data._meta);\n\n        /**\n         * Do some checks in dev-mode\n         * that would be too performance expensive\n         * in production.\n         */\n        if (overwritable.isDevMode()) {\n            // ensure that the primary key has not been changed\n            data = fillPrimaryKey(\n                primaryPath,\n                rxJsonSchema,\n                data as any\n            );\n\n\n            /**\n             * Ensure it can be structured cloned\n             */\n            try {\n                structuredClone(writeRow);\n            } catch (err) {\n                throw newRxError('DOC24', {\n                    collection: storageInstance.collectionName,\n                    document: writeRow.document\n                });\n            }\n\n\n            /**\n             * Ensure that the new revision is higher\n             * then the previous one\n             */\n            if (writeRow.previous) {\n                // TODO run this in the dev-mode plugin\n                // const prev = parseRevision(writeRow.previous._rev);\n                // const current = parseRevision(writeRow.document._rev);\n                // if (current.height <= prev.height) {\n                //     throw newRxError('SNH', {\n                //         dataBefore: writeRow.previous,\n                //         dataAfter: writeRow.document,\n                //         args: {\n                //             prev,\n                //             current\n                //         }\n                //     });\n                // }\n            }\n\n            /**\n             * Ensure that _meta fields have been merged\n             * and not replaced.\n             * This is important so that when one plugin A\n             * sets a _meta field and another plugin B does a write\n             * to the document, it must be ensured that the\n             * field of plugin A was not removed.\n             */\n            if (writeRow.previous) {\n                Object.keys(writeRow.previous._meta)\n                    .forEach(metaFieldName => {\n                        if (!writeRow.document._meta.hasOwnProperty(metaFieldName)) {\n                            throw newRxError('SNH', {\n                                dataBefore: writeRow.previous,\n                                dataAfter: writeRow.document\n                            });\n                        }\n                    });\n            }\n        }\n        data._meta.lwt = now();\n\n        /**\n         * Yes we really want to set the revision here.\n         * If you make a plugin that relies on having its own revision\n         * stored into the storage, use this.originalStorageInstance.bulkWrite() instead.\n         */\n        data._rev = createRevision(\n            database.token,\n            writeRow.previous\n        );\n\n        return {\n            document: data,\n            previous: writeRow.previous\n        };\n    }\n\n    const ret: WrappedRxStorageInstance<RxDocType, Internals, InstanceCreationOptions> = {\n        originalStorageInstance: storageInstance,\n        schema: storageInstance.schema,\n        internals: storageInstance.internals,\n        collectionName: storageInstance.collectionName,\n        databaseName: storageInstance.databaseName,\n        options: storageInstance.options,\n        bulkWrite(\n            rows: BulkWriteRow<RxDocType>[],\n            context: string\n        ) {\n            const toStorageWriteRows: BulkWriteRow<RxDocType>[] = rows\n                .map(row => transformDocumentDataFromRxDBToRxStorage(row));\n\n            return database.lockedRun(\n                () => storageInstance.bulkWrite(\n                    toStorageWriteRows,\n                    context\n                )\n            )\n                /**\n                 * The RxStorageInstance MUST NOT allow to insert already _deleted documents,\n                 * without sending the previous document version.\n                 * But for better developer experience, RxDB does allow to re-insert deleted documents.\n                 * We do this by automatically fixing the conflict errors for that case\n                 * by running another bulkWrite() and merging the results.\n                 * @link https://github.com/pubkey/rxdb/pull/3839\n                 */\n                .then(writeResult => {\n                    const useWriteResult: typeof writeResult = {\n                        error: [],\n                        success: writeResult.success.slice(0)\n                    };\n                    const reInsertErrors: RxStorageWriteErrorConflict<RxDocType>[] =\n                        writeResult.error\n                            .filter((error) => {\n                                if (\n                                    error.status === 409 &&\n                                    !error.writeRow.previous &&\n                                    !error.writeRow.document._deleted &&\n                                    ensureNotFalsy(error.documentInDb)._deleted\n                                ) {\n                                    return true;\n                                }\n                                useWriteResult.error.push(error);\n                                return false;\n                            }) as any;\n                    if (reInsertErrors.length > 0) {\n                        const reInserts: BulkWriteRow<RxDocType>[] = reInsertErrors\n                            .map((error) => {\n                                return {\n                                    previous: error.documentInDb,\n                                    document: Object.assign(\n                                        {},\n                                        error.writeRow.document,\n                                        {\n                                            _rev: createRevision(\n                                                database.token,\n                                                error.documentInDb\n                                            )\n                                        }\n                                    )\n                                };\n                            });\n\n                        return database.lockedRun(\n                            () => storageInstance.bulkWrite(\n                                reInserts,\n                                context\n                            )\n                        ).then(subResult => {\n                            appendToArray(useWriteResult.error, subResult.error);\n                            appendToArray(useWriteResult.success, subResult.success);\n                            return useWriteResult;\n                        });\n                    }\n\n                    return writeResult;\n                });\n        },\n        query(preparedQuery) {\n            return database.lockedRun(\n                () => storageInstance.query(preparedQuery)\n            );\n        },\n        count(preparedQuery) {\n            return database.lockedRun(\n                () => storageInstance.count(preparedQuery)\n            );\n        },\n        info() {\n            return database.lockedRun(\n                () => storageInstance.info()\n            );\n        },\n        findDocumentsById(ids, deleted) {\n            return database.lockedRun(\n                () => storageInstance.findDocumentsById(ids, deleted)\n            );\n        },\n        getAttachmentData(\n            documentId: string,\n            attachmentId: string,\n            digest: string\n        ) {\n            return database.lockedRun(\n                () => storageInstance.getAttachmentData(documentId, attachmentId, digest)\n            );\n        },\n        getChangedDocumentsSince(limit: number, checkpoint?: any) {\n            return database.lockedRun(\n                () => storageInstance.getChangedDocumentsSince(ensureNotFalsy(limit), checkpoint)\n            );\n        },\n        cleanup(minDeletedTime: number) {\n            return database.lockedRun(\n                () => storageInstance.cleanup(minDeletedTime)\n            );\n        },\n        remove() {\n            database.storageInstances.delete(ret);\n            return database.lockedRun(\n                () => storageInstance.remove()\n            );\n        },\n        close() {\n            database.storageInstances.delete(ret);\n            return database.lockedRun(\n                () => storageInstance.close()\n            );\n        },\n        changeStream() {\n            return storageInstance.changeStream();\n        },\n        conflictResultionTasks() {\n            return storageInstance.conflictResultionTasks();\n        },\n        resolveConflictResultionTask(taskSolution) {\n            if (taskSolution.output.isEqual) {\n                return storageInstance.resolveConflictResultionTask(taskSolution);\n            }\n\n            const doc = Object.assign(\n                {},\n                taskSolution.output.documentData,\n                {\n                    _meta: getDefaultRxDocumentMeta(),\n                    _rev: getDefaultRevision(),\n                    _attachments: {}\n                }\n            );\n\n            const documentData = flatClone(doc);\n            delete (documentData as any)._meta;\n            delete (documentData as any)._rev;\n            delete (documentData as any)._attachments;\n\n            return storageInstance.resolveConflictResultionTask({\n                id: taskSolution.id,\n                output: {\n                    isEqual: false,\n                    documentData\n                }\n            });\n        }\n    };\n\n    database.storageInstances.add(ret);\n    return ret;\n}\n\n/**\n * Each RxStorage implementation should\n * run this method at the first step of createStorageInstance()\n * to ensure that the configuration is correct.\n */\nexport function ensureRxStorageInstanceParamsAreCorrect(\n    params: RxStorageInstanceCreationParams<any, any>\n) {\n    if (params.schema.keyCompression) {\n        throw newRxError('UT5', { args: { params } });\n    }\n    if (hasEncryption(params.schema)) {\n        throw newRxError('UT6', { args: { params } });\n    }\n    if (\n        params.schema.attachments &&\n        params.schema.attachments.compression\n    ) {\n        throw newRxError('UT7', { args: { params } });\n    }\n}\n\nexport function hasEncryption(jsonSchema: RxJsonSchema<any>): boolean {\n    if (\n        (!!jsonSchema.encrypted && jsonSchema.encrypted.length > 0) ||\n        (jsonSchema.attachments && jsonSchema.attachments.encrypted)\n    ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n\n/**\n * Wraps the storage and simluates\n * delays. Mostly used in tests.\n */\nexport function randomDelayStorage<Internals, InstanceCreationOptions>(\n    input: {\n        storage: RxStorage<Internals, InstanceCreationOptions>;\n        delayTimeBefore: () => number;\n        delayTimeAfter: () => number;\n    }\n): RxStorage<Internals, InstanceCreationOptions> {\n\n    const retStorage: RxStorage<Internals, InstanceCreationOptions> = {\n        name: 'random-delay-' + input.storage.name,\n        statics: input.storage.statics,\n        async createStorageInstance(params) {\n            await promiseWait(input.delayTimeBefore());\n            const storageInstance = await input.storage.createStorageInstance(params);\n            await promiseWait(input.delayTimeAfter());\n\n            // write still must be processed in order\n            let writeQueue: Promise<any> = PROMISE_RESOLVE_TRUE;\n\n            return {\n                databaseName: storageInstance.databaseName,\n                internals: storageInstance.internals,\n                options: storageInstance.options,\n                schema: storageInstance.schema,\n                collectionName: storageInstance.collectionName,\n                async bulkWrite(a, b) {\n                    writeQueue = writeQueue.then(async () => {\n                        await promiseWait(input.delayTimeBefore());\n                        const response = await storageInstance.bulkWrite(a, b);\n                        await promiseWait(input.delayTimeAfter());\n                        return response;\n                    });\n                    const ret = await writeQueue;\n                    return ret;\n                },\n                async findDocumentsById(a, b) {\n                    await promiseWait(input.delayTimeBefore());\n                    const ret = await storageInstance.findDocumentsById(a, b);\n                    await promiseWait(input.delayTimeAfter());\n                    return ret;\n                },\n                async query(a) {\n                    await promiseWait(input.delayTimeBefore());\n                    const ret = await storageInstance.query(a);\n                    await promiseWait(input.delayTimeAfter());\n                    return ret;\n                },\n                async count(a) {\n                    await promiseWait(input.delayTimeBefore());\n                    const ret = await storageInstance.count(a);\n                    await promiseWait(input.delayTimeAfter());\n                    return ret;\n\n                },\n                async info() {\n                    await promiseWait(input.delayTimeBefore());\n                    const ret = await storageInstance.info();\n                    await promiseWait(input.delayTimeAfter());\n                    return ret;\n\n                },\n                async getAttachmentData(a, b, c) {\n                    await promiseWait(input.delayTimeBefore());\n                    const ret = await storageInstance.getAttachmentData(a, b, c);\n                    await promiseWait(input.delayTimeAfter());\n                    return ret;\n\n                },\n                async getChangedDocumentsSince(a, b) {\n                    await promiseWait(input.delayTimeBefore());\n                    const ret = await storageInstance.getChangedDocumentsSince(a, b);\n                    await promiseWait(input.delayTimeAfter());\n                    return ret;\n\n                },\n                changeStream() {\n                    return storageInstance.changeStream();\n                },\n                conflictResultionTasks() {\n                    return storageInstance.conflictResultionTasks();\n                },\n                resolveConflictResultionTask(a) {\n                    return storageInstance.resolveConflictResultionTask(a);\n                },\n                async cleanup(a) {\n                    await promiseWait(input.delayTimeBefore());\n                    const ret = await storageInstance.cleanup(a);\n                    await promiseWait(input.delayTimeAfter());\n                    return ret;\n\n                },\n                async close() {\n                    await promiseWait(input.delayTimeBefore());\n                    const ret = await storageInstance.close();\n                    await promiseWait(input.delayTimeAfter());\n                    return ret;\n\n                },\n                async remove() {\n                    await promiseWait(input.delayTimeBefore());\n                    const ret = await storageInstance.remove();\n                    await promiseWait(input.delayTimeAfter());\n                    return ret;\n                },\n            };\n\n\n        }\n    };\n    return retStorage;\n}\n"],"mappings":"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"}